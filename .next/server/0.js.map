{"version":3,"file":"0.js","sources":["webpack:///./components/slate-editor/HoverMenu.js"],"sourcesContent":["import React, { useState, useMemo, useRef, useEffect } from 'react'\r\nimport { Slate, Editable, ReactEditor, withReact, useSlate } from 'slate-react'\r\nimport { Editor, Transforms, Text, createEditor } from 'slate'\r\nimport { css } from 'emotion'\r\nimport { withHistory } from 'slate-history'\r\n\r\nimport { Button, Icon, Menu, Portal } from './components'\r\nimport { Range } from 'slate'\r\n\r\nconst HoverMenu = () => {\r\n  const [value, setValue] = useState(initialValue)\r\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\r\n\r\n  return (\r\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\r\n      <HoveringToolbar />\r\n      <Editable\r\n        renderLeaf={props => <Leaf {...props} />}\r\n        placeholder=\"Enter some text...\"\r\n        onDOMBeforeInput={event => {\r\n          event.preventDefault()\r\n          switch (event.inputType) {\r\n            case 'formatBold':\r\n              return toggleFormat(editor, 'bold')\r\n            case 'formatItalic':\r\n              return toggleFormat(editor, 'italic')\r\n            case 'formatUnderline':\r\n              return toggleFormat(editor, 'underline')\r\n          }\r\n        }}\r\n      />\r\n    </Slate>\r\n  )\r\n}\r\n\r\nconst toggleFormat = (editor, format) => {\r\n  const isActive = isFormatActive(editor, format)\r\n  Transforms.setNodes(\r\n    editor,\r\n    { [format]: isActive ? null : true },\r\n    { match: Text.isText, split: true }\r\n  )\r\n}\r\n\r\nconst isFormatActive = (editor, format) => {\r\n  const [match] = Editor.nodes(editor, {\r\n    match: n => n[format] === true,\r\n    mode: 'all',\r\n  })\r\n  return !!match\r\n}\r\n\r\nconst Leaf = ({ attributes, children, leaf }) => {\r\n  if (leaf.bold) {\r\n    children = <strong>{children}</strong>\r\n  }\r\n\r\n  if (leaf.italic) {\r\n    children = <em>{children}</em>\r\n  }\r\n\r\n  if (leaf.underlined) {\r\n    children = <u>{children}</u>\r\n  }\r\n\r\n  return <span {...attributes}>{children}</span>\r\n}\r\n\r\nconst HoveringToolbar = () => {\r\n  const ref = useRef()\r\n  const editor = useSlate()\r\n\r\n  useEffect(() => {\r\n    const el = ref.current\r\n    const { selection } = editor\r\n\r\n    if (!el) {\r\n      return\r\n    }\r\n\r\n    if (\r\n      !selection ||\r\n      !ReactEditor.isFocused(editor) ||\r\n      Range.isCollapsed(selection) ||\r\n      Editor.string(editor, selection) === ''\r\n    ) {\r\n      el.removeAttribute('style')\r\n      return\r\n    }\r\n\r\n    const domSelection = window.getSelection()\r\n    const domRange = domSelection.getRangeAt(0)\r\n    const rect = domRange.getBoundingClientRect()\r\n    el.style.opacity = 1\r\n    el.style.top = `${rect.top + window.pageYOffset - el.offsetHeight}px`\r\n    el.style.left = `${rect.left +\r\n      window.pageXOffset -\r\n      el.offsetWidth / 2 +\r\n      rect.width / 2}px`\r\n  })\r\n\r\n  return (\r\n    <Portal>\r\n      <Menu\r\n        ref={ref}\r\n        className={css`\r\n          padding: 8px 7px 6px;\r\n          position: absolute;\r\n          z-index: 1;\r\n          top: -10000px;\r\n          left: -10000px;\r\n          margin-top: -6px;\r\n          opacity: 0;\r\n          background-color: #222;\r\n          border-radius: 4px;\r\n          transition: opacity 0.75s;\r\n        `}\r\n      >\r\n        <FormatButton format=\"bold\" icon=\"format_bold\" />\r\n        <FormatButton format=\"italic\" icon=\"format_italic\" />\r\n        <FormatButton format=\"underlined\" icon=\"format_underlined\" />\r\n      </Menu>\r\n    </Portal>\r\n  )\r\n}\r\n\r\nconst FormatButton = ({ format, icon }) => {\r\n  const editor = useSlate()\r\n  return (\r\n    <Button\r\n      reversed\r\n      active={isFormatActive(editor, format)}\r\n      onMouseDown={event => {\r\n        event.preventDefault()\r\n        toggleFormat(editor, format)\r\n      }}\r\n    >\r\n      <Icon>{icon}</Icon>\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst initialValue = [\r\n  {\r\n    children: [\r\n      {\r\n        text:\r\n          'This example shows how you can make a hovering menu appear above your content, which you can use to make text ',\r\n      },\r\n      { text: 'bold', bold: true },\r\n      { text: ', ' },\r\n      { text: 'italic', italic: true },\r\n      { text: ', or anything else you might want to do!' },\r\n    ],\r\n  },\r\n  {\r\n    children: [\r\n      { text: 'Try it out yourself! Just ' },\r\n      { text: 'select any piece of text and the menu will appear', bold: true },\r\n      { text: '.' },\r\n    ],\r\n  },\r\n]\r\n\r\nexport default HoverMenu"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AAbA;AAiBA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAGA;AACA;;;;;;;;;;;;AAFA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AACA;AACA;AAEA;AAEA;AADA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AATA;AAaA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAJA;AASA;;;;A","sourceRoot":""}