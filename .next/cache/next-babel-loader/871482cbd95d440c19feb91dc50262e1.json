{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\n\nvar Auth0 =\n/*#__PURE__*/\nfunction () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      // both domain and client ID come from auth0 application settings on the dashboard\n      domain: 'dev-qo3dzhrn.auth0.com',\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ',\n      // redirectUri will replace the URL once you successfully log in\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    }); // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\n\n    this.login = this.login.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.logout = this.logout.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          console.log(authResult);\n\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject(err);\n            console.log(err);\n          }\n        });\n      });\n    } // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\n\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\n      var expiresAt = _JSON$stringify(authResult.expiresIn * 2000 + new Date().getTime());\n\n      Cookies.set('user', authResult.idTokenPayload);\n      Cookies.set('jwt', authResult.idToken);\n      Cookies.set('expiresAt', expiresAt);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n      this.auth0.logout({\n        returnTo: '',\n        clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ'\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      var expiresAt = Cookies.getJSON('expiresAt');\n      return new Date().getTime() < expiresAt;\n    }\n  }, {\n    key: \"verifyToken\",\n    value: function verifyToken(token) {\n      if (token) {\n        var decodedToken = jwt.decode(token); // this multiplier is to convert miliseconds to seconds\n\n        var expiresAt = decodedToken.exp * 1000; // this notation checks if there is a token and current time is less than expiresAt return decodedToken, else return undefined\n\n        return decodedToken && new Date().getTime() < expiresAt ? decodedToken : undefined;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"clientAuth\",\n    value: function clientAuth() {\n      var token = Cookies.getJSON('jwt');\n      var verifiedToken = this.verifyToken(token);\n      return verifiedToken;\n    }\n  }, {\n    key: \"serverAuth\",\n    value: function serverAuth(req) {\n      if (req.headers.cookie) {\n        var tokenCookie = req.headers.cookie.split(\";\").find(function (c) {\n          return c.trim().startsWith('jwt=');\n        });\n\n        if (!tokenCookie) {\n          return undefined;\n        }\n\n        var token = tokenCookie.split('=')[1];\n        var verifiedToken = this.verifyToken(token);\n        return verifiedToken;\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["E:/Documents/Projects/portfolio/frontend/services/auth0.js"],"names":["auth0","Cookies","jwt","Auth0","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","handleAuthentication","logout","isAuthenticated","resolve","reject","parseHash","err","authResult","console","log","accessToken","idToken","setSession","expiresAt","expiresIn","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","getJSON","token","decodedToken","decode","exp","undefined","verifiedToken","verifyToken","req","headers","cookie","tokenCookie","split","find","c","trim","startsWith","auth0Client"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js'\r\nimport Cookies from 'js-cookie'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nclass Auth0 {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      // both domain and client ID come from auth0 application settings on the dashboard\r\n      domain: 'dev-qo3dzhrn.auth0.com',\r\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ',\r\n      // redirectUri will replace the URL once you successfully log in\r\n      redirectUri:'http://localhost:3000/callback',\r\n      responseType: 'token id_token',\r\n      scope: 'openid profile'\r\n    })\r\n    \r\n    // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\r\n    this.login = this.login.bind(this)\r\n    this.handleAuthentication = this.handleAuthentication.bind(this)\r\n    this.logout = this.logout.bind(this)\r\n    this.isAuthenticated = this.isAuthenticated.bind(this)\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        console.log(authResult)\r\n        if(authResult && authResult.accessToken && authResult.idToken) {\r\n          this.setSession(authResult)\r\n          resolve()\r\n        } else if (err) {\r\n          reject(err)\r\n          console.log(err)\r\n        }\r\n      })\r\n    })\r\n  }\r\n  // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\r\n  setSession(authResult) {\r\n    // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\r\n    const expiresAt = JSON.stringify((authResult.expiresIn * 2000) + new Date().getTime())\r\n\r\n    Cookies.set('user', authResult.idTokenPayload)\r\n    Cookies.set('jwt', authResult.idToken)\r\n    Cookies.set('expiresAt', expiresAt)\r\n  }\r\n\r\n  logout(){\r\n    Cookies.remove('user')\r\n    Cookies.remove('jwt')\r\n    Cookies.remove('expiresAt')\r\n\r\n    this.auth0.logout({\r\n      returnTo: '',\r\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ'\r\n    })\r\n  }\r\n\r\n  login() {\r\n    this.auth0.authorize()\r\n  }\r\n\r\n  isAuthenticated() {\r\n    const expiresAt = Cookies.getJSON('expiresAt')\r\n    return new Date().getTime() < expiresAt\r\n  }\r\n\r\n  verifyToken(token) {\r\n    if (token) {\r\n      const decodedToken = jwt.decode(token)\r\n      // this multiplier is to convert miliseconds to seconds\r\n      const expiresAt = decodedToken.exp * 1000\r\n      // this notation checks if there is a token and current time is less than expiresAt return decodedToken, else return undefined\r\n      return (decodedToken && new Date().getTime() < expiresAt ) ? decodedToken : undefined\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  clientAuth() {\r\n    const token = Cookies.getJSON('jwt')\r\n    const verifiedToken = this.verifyToken(token)\r\n\r\n    return verifiedToken\r\n  }\r\n\r\n  serverAuth(req) {\r\n    \r\n    if(req.headers.cookie){\r\n      const tokenCookie = req.headers.cookie.split(\";\").find(c => c.trim().startsWith('jwt='))\r\n      \r\n      if(!tokenCookie) {\r\n        return undefined\r\n      }\r\n\r\n      const token = tokenCookie.split('=')[1]\r\n      const verifiedToken = this.verifyToken(token)\r\n\r\n      return verifiedToken\r\n\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n\r\n}\r\n\r\nconst auth0Client = new Auth0()\r\n\r\nexport default auth0Client"]},"metadata":{},"sourceType":"module"}