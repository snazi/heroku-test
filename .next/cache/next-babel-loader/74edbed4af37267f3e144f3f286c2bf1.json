{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n          padding: 8px 7px 6px;\\n          position: absolute;\\n          z-index: 1;\\n          top: -10000px;\\n          left: -10000px;\\n          margin-top: -6px;\\n          opacity: 0;\\n          background-color: #222;\\n          border-radius: 4px;\\n          transition: opacity 0.75s;\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Slate, Editable, ReactEditor, withReact, useSlate } from 'slate-react';\nimport { Editor, Transforms, Text, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Menu, Portal } from './components';\nimport { Range } from 'slate';\n\nvar HoverMenu = function HoverMenu() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withHistory(withReact(createEditor()));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(HoveringToolbar, null), __jsx(Editable, {\n    renderLeaf: function renderLeaf(props) {\n      return __jsx(Leaf, props);\n    },\n    placeholder: \"Enter some text...\",\n    onDOMBeforeInput: function onDOMBeforeInput(event) {\n      event.preventDefault();\n\n      switch (event.inputType) {\n        case 'formatBold':\n          return toggleFormat(editor, 'bold');\n\n        case 'formatItalic':\n          return toggleFormat(editor, 'italic');\n\n        case 'formatUnderline':\n          return toggleFormat(editor, 'underline');\n      }\n    }\n  }));\n};\n\nvar toggleFormat = function toggleFormat(editor, format) {\n  var isActive = isFormatActive(editor, format);\n  Transforms.setNodes(editor, _defineProperty({}, format, isActive ? null : true), {\n    match: Text.isText,\n    split: true\n  });\n};\n\nvar isFormatActive = function isFormatActive(editor, format) {\n  var _Editor$nodes = Editor.nodes(editor, {\n    match: function match(n) {\n      return n[format] === true;\n    },\n    mode: 'all'\n  }),\n      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n      match = _Editor$nodes2[0];\n\n  return !!match;\n};\n\nvar Leaf = function Leaf(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      leaf = _ref.leaf;\n\n  if (leaf.bold) {\n    children = __jsx(\"strong\", null, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", null, children);\n  }\n\n  if (leaf.underlined) {\n    children = __jsx(\"u\", null, children);\n  }\n\n  return __jsx(\"span\", attributes, children);\n};\n\nvar HoveringToolbar = function HoveringToolbar() {\n  var ref = useRef();\n  var editor = useSlate();\n  useEffect(function () {\n    var el = ref.current;\n    var selection = editor.selection;\n\n    if (!el) {\n      return;\n    }\n\n    if (!selection || !ReactEditor.isFocused(editor) || Range.isCollapsed(selection) || Editor.string(editor, selection) === '') {\n      el.removeAttribute('style');\n      return;\n    }\n\n    var domSelection = window.getSelection();\n    var domRange = domSelection.getRangeAt(0);\n    var rect = domRange.getBoundingClientRect();\n    el.style.opacity = 1;\n    el.style.top = \"\".concat(rect.top + window.pageYOffset - el.offsetHeight, \"px\");\n    el.style.left = \"\".concat(rect.left + window.pageXOffset - el.offsetWidth / 2 + rect.width / 2, \"px\");\n  });\n  return __jsx(Portal, null, __jsx(Menu, {\n    ref: ref,\n    className: css(_templateObject())\n  }, __jsx(FormatButton, {\n    format: \"bold\",\n    icon: \"format_bold\"\n  }), __jsx(FormatButton, {\n    format: \"italic\",\n    icon: \"format_italic\"\n  }), __jsx(FormatButton, {\n    format: \"underlined\",\n    icon: \"format_underlined\"\n  })));\n};\n\nvar FormatButton = function FormatButton(_ref2) {\n  var format = _ref2.format,\n      icon = _ref2.icon;\n  var editor = useSlate();\n  return __jsx(Button, {\n    reversed: true,\n    active: isFormatActive(editor, format),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      toggleFormat(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nvar initialValue = [{\n  children: [{\n    text: 'This example shows how you can make a hovering menu appear above your content, which you can use to make text '\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', '\n  }, {\n    text: 'italic',\n    italic: true\n  }, {\n    text: ', or anything else you might want to do!'\n  }]\n}, {\n  children: [{\n    text: 'Try it out yourself! Just '\n  }, {\n    text: 'select any piece of text and the menu will appear',\n    bold: true\n  }, {\n    text: '.'\n  }]\n}];\nexport default HoverMenu;","map":null,"metadata":{},"sourceType":"module"}