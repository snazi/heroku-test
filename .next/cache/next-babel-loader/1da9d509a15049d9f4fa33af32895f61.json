{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport App, { Container } from 'next/app';\nimport auth0 from '../services/auth0'; //styling\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../components/common/styles/main.scss'; // TODO: once finished with entire project, use the current implementation, this is depcrated.\n\nexport default class MyApp extends App {\n  static async getInitialProps({\n    Component,\n    router,\n    ctx\n  }) {\n    let pageProps = {};\n    const user = false ? await auth0.clientAuth() : await auth0.serverAuth(ctx.req);\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    let isAuthenticated = false;\n\n    if (user) {\n      isAuthenticated = true;\n    } // now that we've managed to give auth details to both client and server side, we should pass the auth data to our pages\n\n\n    const auth = {\n      user,\n      isAuthenticated\n    }; // return auth as well as page props\n\n    return {\n      pageProps,\n      auth\n    };\n  }\n\n  render() {\n    // pass it along\n    const {\n      Component,\n      pageProps,\n      auth\n    } = this.props; // create an auth prop and pass this current instance of auth.\n\n    return __jsx(Container, null, __jsx(Component, _extends({}, pageProps, {\n      auth: auth\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}