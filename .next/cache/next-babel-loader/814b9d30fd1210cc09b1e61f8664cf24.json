{"ast":null,"code":"import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // both domain and client ID come from auth0 application settings on the dashboard\n      domain: 'dev-qo3dzhrn.auth0.com',\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ',\n      // redirectUri will replace the URL once you successfully log in\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    }); // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\n\n    this.login = this.login.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.logout = this.logout.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        console.log(authResult);\n\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    });\n  } // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\n\n\n  setSession(authResult) {\n    // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\n    const expiresAt = JSON.stringify(authResult.expiresIn * 2000 + new Date().getTime());\n    Cookies.set('user', authResult.idTokenPayload);\n    Cookies.set('jwt', authResult.idToken);\n    Cookies.set('expiresAt', expiresAt);\n  }\n\n  logout() {\n    Cookies.remove('user');\n    Cookies.remove('jwt');\n    Cookies.remove('expiresAt');\n    this.auth0.logout({\n      returnTo: '',\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ'\n    });\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  isAuthenticated() {\n    const expiresAt = Cookies.getJSON('expiresAt');\n    return new Date().getTime() < expiresAt;\n  }\n\n  verifyToken(token) {\n    if (token) {\n      const decodedToken = jwt.decode(token); // this multiplier is to convert miliseconds to seconds\n\n      const expiresAt = decodedToken.exp * 1000; // this notation checks if there is a token and current time is less than expiresAt return decodedToken, else return undefined\n\n      return decodedToken && new Date().getTime() < expiresAt ? decodedToken : undefined;\n    }\n\n    return undefined;\n  }\n\n  clientAuth() {\n    const token = Cookies.getJSON('jwt');\n    const verifiedToken = this.verifyToken(token);\n    return verifiedToken;\n  }\n\n  serverAuth(req) {\n    if (req.headers.cookie) {\n      const tokenCookie = req.headers.cookie.split(\";\").find(c => c.trim().startsWith('jwt='));\n\n      if (!tokenCookie) {\n        return undefined;\n      }\n\n      const token = tokenCookie.split('=')[1];\n      const verifiedToken = this.verifyToken(token);\n      return verifiedToken;\n    }\n\n    return undefined;\n  }\n\n}\n\nconst auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["E:/Documents/Projects/portfolio/frontend/services/auth0.js"],"names":["auth0","Cookies","jwt","Auth0","constructor","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","handleAuthentication","logout","isAuthenticated","Promise","resolve","reject","parseHash","err","authResult","console","log","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","getJSON","verifyToken","token","decodedToken","decode","exp","undefined","clientAuth","verifiedToken","serverAuth","req","headers","cookie","tokenCookie","split","find","c","trim","startsWith","auth0Client"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js'\r\nimport Cookies from 'js-cookie'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nclass Auth0 {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      // both domain and client ID come from auth0 application settings on the dashboard\r\n      domain: 'dev-qo3dzhrn.auth0.com',\r\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ',\r\n      // redirectUri will replace the URL once you successfully log in\r\n      redirectUri:'http://localhost:3000/callback',\r\n      responseType: 'token id_token',\r\n      scope: 'openid profile'\r\n    })\r\n    \r\n    // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\r\n    this.login = this.login.bind(this)\r\n    this.handleAuthentication = this.handleAuthentication.bind(this)\r\n    this.logout = this.logout.bind(this)\r\n    this.isAuthenticated = this.isAuthenticated.bind(this)\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        console.log(authResult)\r\n        if(authResult && authResult.accessToken && authResult.idToken) {\r\n          this.setSession(authResult)\r\n          resolve()\r\n        } else if (err) {\r\n          reject(err)\r\n          console.log(err)\r\n        }\r\n      })\r\n    })\r\n  }\r\n  // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\r\n  setSession(authResult) {\r\n    // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\r\n    const expiresAt = JSON.stringify((authResult.expiresIn * 2000) + new Date().getTime())\r\n\r\n    Cookies.set('user', authResult.idTokenPayload)\r\n    Cookies.set('jwt', authResult.idToken)\r\n    Cookies.set('expiresAt', expiresAt)\r\n  }\r\n\r\n  logout(){\r\n    Cookies.remove('user')\r\n    Cookies.remove('jwt')\r\n    Cookies.remove('expiresAt')\r\n\r\n    this.auth0.logout({\r\n      returnTo: '',\r\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ'\r\n    })\r\n  }\r\n\r\n  login() {\r\n    this.auth0.authorize()\r\n  }\r\n\r\n  isAuthenticated() {\r\n    const expiresAt = Cookies.getJSON('expiresAt')\r\n    return new Date().getTime() < expiresAt\r\n  }\r\n\r\n  verifyToken(token) {\r\n    if (token) {\r\n      const decodedToken = jwt.decode(token)\r\n      // this multiplier is to convert miliseconds to seconds\r\n      const expiresAt = decodedToken.exp * 1000\r\n      // this notation checks if there is a token and current time is less than expiresAt return decodedToken, else return undefined\r\n      return (decodedToken && new Date().getTime() < expiresAt ) ? decodedToken : undefined\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  clientAuth() {\r\n    const token = Cookies.getJSON('jwt')\r\n    const verifiedToken = this.verifyToken(token)\r\n\r\n    return verifiedToken\r\n  }\r\n\r\n  serverAuth(req) {\r\n    \r\n    if(req.headers.cookie){\r\n      const tokenCookie = req.headers.cookie.split(\";\").find(c => c.trim().startsWith('jwt='))\r\n      \r\n      if(!tokenCookie) {\r\n        return undefined\r\n      }\r\n\r\n      const token = tokenCookie.split('=')[1]\r\n      const verifiedToken = this.verifyToken(token)\r\n\r\n      return verifiedToken\r\n\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n\r\n}\r\n\r\nconst auth0Client = new Auth0()\r\n\r\nexport default auth0Client"]},"metadata":{},"sourceType":"module"}