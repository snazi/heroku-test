{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport App, { Container } from 'next/app';\nimport auth0 from '../services/auth0';\nimport Fonts from '../helpers/Fonts'; //styling\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../components/common/styles/main.scss';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // TODO: once finished with entire project, use the current implementation, this is depcrated.\n// const namespace = 'http://localhost:3000'\n\nvar MyApp =\n/*#__PURE__*/\nfunction (_App) {\n  _inherits(MyApp, _App);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyApp).apply(this, arguments));\n  }\n\n  _createClass(MyApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Fonts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // pass it along\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          auth = _this$props.auth; // create an auth prop and pass this current instance of auth.\n\n      return __jsx(Container, null, __jsx(ToastContainer, null), __jsx(Component, _extends({}, pageProps, {\n        auth: auth\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref) {\n      var Component, router, ctx, pageProps, user, isAuthenticated, isSiteOwner, auth;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Component = _ref.Component, router = _ref.router, ctx = _ref.ctx;\n              pageProps = {};\n\n              if (!true) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(auth0.clientAuth());\n\n            case 5:\n              _context.t0 = _context.sent;\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(auth0.serverAuth(ctx.req));\n\n            case 10:\n              _context.t0 = _context.sent;\n\n            case 11:\n              user = _context.t0;\n\n              if (!Component.getInitialProps) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n            case 15:\n              pageProps = _context.sent;\n\n            case 16:\n              isAuthenticated = false;\n\n              if (user) {\n                isAuthenticated = true;\n              }\n\n              isSiteOwner = user && user[\"http://angeloamadora.herokuapp.com/role\"] === 'siteOwner'; // now that we've managed to give auth details to both client and server side, we should pass the auth data to our pages\n\n              auth = {\n                user: user,\n                isAuthenticated: !!user,\n                isSiteOwner: isSiteOwner\n              }; // return auth as well as page props\n\n              return _context.abrupt(\"return\", {\n                pageProps: pageProps,\n                auth: auth\n              });\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }]);\n\n  return MyApp;\n}(App);\n\nexport { MyApp as default };","map":{"version":3,"sources":["E:/Documents/Projects/heroku potfolio test/heroku-test/pages/_app.js"],"names":["React","App","Container","auth0","Fonts","ToastContainer","toast","MyApp","props","Component","pageProps","auth","router","ctx","clientAuth","serverAuth","req","user","getInitialProps","isAuthenticated","isSiteOwner"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,IAAaC,SAAb,QAA6B,UAA7B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB,C,CAEA;;AACA,OAAO,sCAAP;AACA,OAAO,uCAAP;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP,C,CACA;AACA;;IAEqBC,K;;;;;;;;;;;;;wCAyBG;AAChBH,MAAAA,KAAK;AACR;;;6BAEQ;AACL;AADK,wBAEkC,KAAKI,KAFvC;AAAA,UAEGC,SAFH,eAEGA,SAFH;AAAA,UAEcC,SAFd,eAEcA,SAFd;AAAA,UAEyBC,IAFzB,eAEyBA,IAFzB,EAGL;;AACA,aACI,MAAC,SAAD,QACI,MAAC,cAAD,OADJ,EAEI,MAAC,SAAD,eAAeD,SAAf;AAA2B,QAAA,IAAI,EAAEC;AAAjC,SAFJ,CADJ;AAMH;;;;;;;;;AAtC8BF,cAAAA,S,QAAAA,S,EAAWG,M,QAAAA,M,EAAQC,G,QAAAA,G;AAE1CH,cAAAA,S,GAAY,E;;;;;;;;+CAEqBP,KAAK,CAACW,UAAN,E;;;;;;;;;+CAA2BX,KAAK,CAACY,UAAN,CAAiBF,GAAG,CAACG,GAArB,C;;;;;;AAA1DC,cAAAA,I;;mBAEHR,SAAS,CAACS,e;;;;;;+CACST,SAAS,CAACS,eAAV,CAA0BL,GAA1B,C;;;AAAlBH,cAAAA,S;;;AAGAS,cAAAA,e,GAAkB,K;;AACtB,kBAAGF,IAAH,EAAQ;AACJE,gBAAAA,eAAe,GAAG,IAAlB;AACH;;AAEKC,cAAAA,W,GAAcH,IAAI,IAAIA,IAAI,2CAAJ,KAAwC,W,EAEpE;;AACMN,cAAAA,I,GAAO;AAAEM,gBAAAA,IAAI,EAAJA,IAAF;AAAQE,gBAAAA,eAAe,EAAE,CAAC,CAACF,IAA3B;AAAiCG,gBAAAA,WAAW,EAAXA;AAAjC,e,EAEb;;+CACO;AAAEV,gBAAAA,SAAS,EAATA,SAAF;AAAaC,gBAAAA,IAAI,EAAJA;AAAb,e;;;;;;;;;;;;EAtBoBV,G;;SAAdM,K","sourcesContent":["import React from 'react'\r\nimport App, {Container} from 'next/app'\r\nimport auth0 from '../services/auth0'\r\nimport Fonts from '../helpers/Fonts'\r\n\r\n//styling\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../components/common/styles/main.scss'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n// TODO: once finished with entire project, use the current implementation, this is depcrated.\r\n// const namespace = 'http://localhost:3000'\r\n\r\nexport default class MyApp extends App {\r\n    static async getInitialProps({ Component, router, ctx }) {\r\n\r\n        let pageProps = {}\r\n\r\n        const user = process.browser ? await auth0.clientAuth() : await auth0.serverAuth(ctx.req)\r\n        \r\n        if(Component.getInitialProps){\r\n            pageProps = await Component.getInitialProps(ctx)\r\n        }\r\n\r\n        let isAuthenticated = false\r\n        if(user){\r\n            isAuthenticated = true\r\n        }\r\n\r\n        const isSiteOwner = user && user[process.env.NAMESPACE+'/role'] === 'siteOwner'\r\n\r\n        // now that we've managed to give auth details to both client and server side, we should pass the auth data to our pages\r\n        const auth = { user, isAuthenticated: !!user, isSiteOwner  }\r\n\r\n        // return auth as well as page props\r\n        return { pageProps, auth }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Fonts()\r\n    }\r\n\r\n    render() {\r\n        // pass it along\r\n        const { Component, pageProps, auth } = this.props\r\n        // create an auth prop and pass this current instance of auth.\r\n        return (\r\n            <Container>\r\n                <ToastContainer />\r\n                <Component {...pageProps } auth={auth} />\r\n            </Container>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}