{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback } from \"react\"; // Import the Slate editor factory.\n\nimport { createEditor, Editor, Transforms, Text } from 'slate'; // Import the Slate components and React plugin.\n\nimport { Slate, Editable, withReact } from 'slate-react';\nvar CustomEditor = {\n  isBoldMarkActive: function isBoldMarkActive(editor) {\n    var _Editor$nodes = Editor.nodes(editor, {\n      match: function match(n) {\n        return n.bold === true;\n      },\n      universal: true\n    }),\n        _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n        match = _Editor$nodes2[0];\n\n    return !!match;\n  },\n  isCodeBlockActive: function isCodeBlockActive(editor) {\n    var _Editor$nodes3 = Editor.nodes(editor, {\n      match: function match(n) {\n        return n.type === 'code';\n      }\n    }),\n        _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),\n        match = _Editor$nodes4[0];\n\n    return !!match;\n  },\n  toggleBoldMark: function toggleBoldMark(editor) {\n    var isActive = CustomEditor.isBoldMarkActive(editor);\n    Transforms.setNodes(editor, {\n      bold: isActive ? null : true\n    }, {\n      match: function match(n) {\n        return Text.isText(n);\n      },\n      split: true\n    });\n  },\n  toggleCodeBlock: function toggleCodeBlock(editor) {\n    var isActive = CustomEditor.isCodeBlockActive(editor);\n    Transforms.setNodes(editor, {\n      type: isActive ? null : 'code'\n    }, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n  }\n};\n\nvar DefaultElement = function DefaultElement(props) {\n  return __jsx(\"p\", props.attributes, props.children);\n};\n\nvar Leaf = function Leaf(props) {\n  return __jsx(\"span\", _extends({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? 'bold' : 'normal'\n    }\n  }), props.children);\n};\n\nvar SlateEditor = function SlateEditor() {\n  var editor = useMemo(function () {\n    return withReact(createEditor());\n  }, []);\n\n  var _useState = useState([{\n    type: 'paragraph',\n    children: [{\n      text: 'A line of text in a paragraph.'\n    }]\n  }]),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, props);\n  }, []);\n  var renderElement = useCallback(function (props) {\n    switch (props.element.type) {\n      case 'code':\n        return __jsx(CodeElement, props);\n\n      default:\n        return __jsx(DefaultElement, props);\n    }\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(newValue) {\n      return setValue(newValue);\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: function onKeyDown(event) {\n      if (!event.ctrlKey) {\n        return;\n      } // Replace the `onKeyDown` logic with our new commands.\n\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n      }\n    }\n  }));\n};\n\nexport default SlateEditor;","map":{"version":3,"sources":["E:/Documents/Projects/heroku potfolio test/heroku-test/components/slate-editor/Editor.js"],"names":["React","useEffect","useMemo","useState","useCallback","createEditor","Editor","Transforms","Text","Slate","Editable","withReact","CustomEditor","isBoldMarkActive","editor","nodes","match","n","bold","universal","isCodeBlockActive","type","toggleBoldMark","isActive","setNodes","isText","split","toggleCodeBlock","isBlock","DefaultElement","props","attributes","children","Leaf","fontWeight","leaf","SlateEditor","text","value","setValue","renderLeaf","renderElement","element","newValue","event","ctrlKey","key","preventDefault"],"mappings":"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","sourcesContent":["// Import React dependencies.\r\nimport React, { useEffect, useMemo, useState, useCallback } from \"react\";\r\n// Import the Slate editor factory.\r\nimport { createEditor, Editor, Transforms, Text } from 'slate'\r\n\r\n// Import the Slate components and React plugin.\r\nimport { Slate, Editable, withReact } from 'slate-react'\r\n\r\nconst CustomEditor = {\r\n  isBoldMarkActive(editor) {\r\n    const [match] = Editor.nodes(editor, {\r\n      match: n => n.bold === true,\r\n      universal: true,\r\n    })\r\n\r\n    return !!match\r\n  },\r\n\r\n  isCodeBlockActive(editor) {\r\n    const [match] = Editor.nodes(editor, {\r\n      match: n => n.type === 'code',\r\n    })\r\n\r\n    return !!match\r\n  },\r\n\r\n  toggleBoldMark(editor) {\r\n    const isActive = CustomEditor.isBoldMarkActive(editor)\r\n    Transforms.setNodes(\r\n      editor,\r\n      { bold: isActive ? null : true },\r\n      { match: n => Text.isText(n), split: true }\r\n    )\r\n  },\r\n\r\n  toggleCodeBlock(editor) {\r\n    const isActive = CustomEditor.isCodeBlockActive(editor)\r\n    Transforms.setNodes(\r\n      editor,\r\n      { type: isActive ? null : 'code' },\r\n      { match: n => Editor.isBlock(editor, n) }\r\n    )\r\n  },\r\n}\r\n\r\nconst DefaultElement = props => {\r\n  return <p {...props.attributes}>{props.children}</p>\r\n}\r\n\r\nconst Leaf = props => {\r\n  return (\r\n    <span\r\n      {...props.attributes}\r\n      style={{ fontWeight: props.leaf.bold ? 'bold' : 'normal' }}\r\n    >\r\n      {props.children}\r\n    </span>\r\n  )\r\n}\r\n\r\nconst SlateEditor = () => {\r\n  const editor = useMemo(() => withReact(createEditor()), [])\r\n  const [value, setValue] = useState([\r\n    {\r\n      type: 'paragraph',\r\n      children: [{ text: 'A line of text in a paragraph.' }],\r\n    },\r\n  ])\r\n\r\n  const renderLeaf = useCallback(props => {\r\n    return <Leaf {...props} />\r\n  }, [])\r\n\r\n  const renderElement = useCallback(props => {\r\n    switch (props.element.type) {\r\n      case 'code':\r\n        return <CodeElement {...props} />\r\n      default:\r\n        return <DefaultElement {...props} />\r\n    }\r\n  }, [])\r\n      return( \r\n        <Slate editor={editor} value={value} onChange={newValue => setValue(newValue)}>\r\n            <Editable \r\n              renderElement={renderElement}\r\n              renderLeaf={renderLeaf}\r\n              onKeyDown={event => {\r\n                if (!event.ctrlKey) {\r\n                  return\r\n                }\r\n      \r\n                // Replace the `onKeyDown` logic with our new commands.\r\n                switch (event.key) {\r\n                  case '`': {\r\n                    event.preventDefault()\r\n                    CustomEditor.toggleCodeBlock(editor)\r\n                    break\r\n                  }\r\n      \r\n                  case 'b': {\r\n                    event.preventDefault()\r\n                    CustomEditor.toggleBoldMark(editor)\r\n                    break\r\n                  }\r\n                }\r\n              }}\r\n            />\r\n        </Slate>\r\n    )\r\n}\r\n\r\nexport default SlateEditor\r\n"]},"metadata":{},"sourceType":"module"}