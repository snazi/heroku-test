{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\Projects\\\\portfolio\\\\pages\\\\index.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Header from '../components/common/Header/Header';\nimport BaseLayout from '../components/layouts/BaseLayout';\nexport class Index extends Component {\n  // constructor will be called first\n  constructor() {\n    super(); // this state is special for class components. They are data you can use\n\n    this.state = {\n      title: 'I am title page'\n    };\n    console.log('constructor');\n  } //did mount will always fire whenever everything is done executed\n\n\n  componentDidMount() {\n    console.log('component did mount');\n  } //will be called whenever an update happens\n\n\n  componentDidUpdate() {\n    console.log('component did update');\n  }\n\n  componentWillUnmount() {\n    console.log('component will unmount');\n  }\n\n  updateTitle() {\n    this.setState({\n      title: 'wew'\n    });\n  } // then 2nd to be called is render()\n\n\n  render() {\n    console.log('render'); // this is called destructuring. Im taking the reference to this.state.title and assigning it to variable title\n\n    const {\n      title\n    } = this.state;\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, __jsx(BaseLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, __jsx(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Welcome to Index Poasaage\"), __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, title), __jsx(\"button\", {\n      onClick: () => this.updateTitle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"Change title\")));\n  }\n\n}\nexport default Index;","map":{"version":3,"sources":["E:/Documents/Projects/portfolio/pages/index.jsx"],"names":["React","Component","Header","BaseLayout","Index","constructor","state","title","console","log","componentDidMount","componentDidUpdate","componentWillUnmount","updateTitle","setState","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAO,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AACjC;AACAI,EAAAA,WAAW,GAAG;AACV,YADU,CAEV;;AACA,SAAKC,KAAL,GAAa;AACVC,MAAAA,KAAK,EAAE;AADG,KAAb;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,GAVgC,CAWjC;;;AACAC,EAAAA,iBAAiB,GAAE;AACfF,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,GAdgC,CAejC;;;AACAE,EAAAA,kBAAkB,GAAG;AACjBH,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AAEDG,EAAAA,oBAAoB,GAAG;AAClBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACJ;;AAEDI,EAAAA,WAAW,GAAG;AACV,SAAKC,QAAL,CAAc;AAAEP,MAAAA,KAAK,EAAE;AAAT,KAAd;AACH,GA1BgC,CA4BjC;;;AACAQ,EAAAA,MAAM,GAAG;AACLP,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EADK,CAEL;;AACA,UAAM;AAACF,MAAAA;AAAD,QAAU,KAAKD,KAArB;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,KAAL,CAFJ,EAII;AAAQ,MAAA,OAAO,EAAG,MAAM,KAAKM,WAAL,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,CAFJ,CADJ;AAWH;;AA5CgC;AA+CrC,eAAeT,KAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Header from '../components/common/Header/Header'\r\nimport BaseLayout from '../components/layouts/BaseLayout'\r\nexport class Index extends Component {\r\n    // constructor will be called first\r\n    constructor() {\r\n        super()\r\n        // this state is special for class components. They are data you can use\r\n        this.state = {\r\n           title: 'I am title page' \r\n        }\r\n        \r\n        console.log('constructor')\r\n    }\r\n    //did mount will always fire whenever everything is done executed\r\n    componentDidMount(){\r\n        console.log('component did mount')\r\n    }\r\n    //will be called whenever an update happens\r\n    componentDidUpdate() {\r\n        console.log('component did update')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n         console.log('component will unmount')\r\n    }\r\n\r\n    updateTitle() {\r\n        this.setState({ title: 'wew' })\r\n    }\r\n\r\n    // then 2nd to be called is render()\r\n    render() {\r\n        console.log('render')\r\n        // this is called destructuring. Im taking the reference to this.state.title and assigning it to variable title\r\n        const {title} = this.state\r\n        return (\r\n            <div>\r\n            \r\n                <BaseLayout>\r\n                    <h1>Welcome to Index Poasaage</h1>\r\n                    <h2>{title}</h2>\r\n                    {/* this button's onClick property executes a function denoted by the arrow => function which fires updateTitle() */}\r\n                    <button onClick={ () => this.updateTitle()}>Change title</button>\r\n                </BaseLayout>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}