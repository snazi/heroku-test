{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport { getCookieFromRequest } from '../helpers/utils';\n\nvar Auth0 =\n/*#__PURE__*/\nfunction () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      // both domain and client ID come from auth0 application settings on the dashboard\n      domain: 'dev-qo3dzhrn.auth0.com',\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ',\n      // redirectUri will replace the URL once you successfully log in\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    }); // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\n\n    this.login = this.login.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          console.log(authResult);\n\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject(err);\n            console.log(err);\n          }\n        });\n      });\n    } // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\n\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\n      var expiresAt = _JSON$stringify(authResult.expiresIn * 2000 + new Date().getTime());\n\n      Cookies.set('user', authResult.idTokenPayload);\n      Cookies.set('jwt', authResult.idToken);\n      Cookies.set('expiresAt', expiresAt);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n      this.auth0.logout({\n        returnTo: '',\n        clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ'\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"getJWKS\",\n    value: function getJWKS() {\n      var res, jwks;\n      return _regeneratorRuntime.async(function getJWKS$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get('https://dev-qo3dzhrn.auth0.com/.well-known/jwks.json'));\n\n            case 2:\n              res = _context.sent;\n              jwks = res.data;\n              return _context.abrupt(\"return\", jwks);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"verifyToken\",\n    value: function verifyToken(token) {\n      var decodedToken, jwks, jwk, cert, verifiedToken, expiresAt;\n      return _regeneratorRuntime.async(function verifyToken$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!token) {\n                _context2.next = 21;\n                break;\n              }\n\n              decodedToken = jwt.decode(token, {\n                complete: true\n              });\n\n              if (decodedToken) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", undefined);\n\n            case 4:\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(this.getJWKS());\n\n            case 6:\n              jwks = _context2.sent;\n              jwk = jwks.keys[0]; // build certificate\n\n              cert = jwk.x5c[0];\n              cert = cert.match(/.{1,64}/g).join('\\n');\n              cert = \"-----BEGIN CERTIFICATE-----\\n\".concat(cert, \"\\n-----END CERTIFICATE-----\\n\");\n\n              if (!(jwk.kid === decodedToken.header.kid)) {\n                _context2.next = 21;\n                break;\n              }\n\n              _context2.prev = 12;\n              verifiedToken = jwt.verify(token, cert); // this multiplier is to convert miliseconds to seconds\n\n              expiresAt = verifiedToken.exp * 1000;\n              return _context2.abrupt(\"return\", verifiedToken && new Date().getTime() < expiresAt ? verifiedToken : undefined);\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](12);\n              return _context2.abrupt(\"return\", undefined);\n\n            case 21:\n              return _context2.abrupt(\"return\", undefined);\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[12, 18]]);\n    }\n  }, {\n    key: \"clientAuth\",\n    value: function clientAuth() {\n      var token, verifiedToken;\n      return _regeneratorRuntime.async(function clientAuth$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              token = Cookies.getJSON('jwt');\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(this.verifyToken(token));\n\n            case 3:\n              verifiedToken = _context3.sent;\n              return _context3.abrupt(\"return\", verifiedToken);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"serverAuth\",\n    value: function serverAuth(req) {\n      var token, verifiedToken;\n      return _regeneratorRuntime.async(function serverAuth$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!req.headers.cookie) {\n                _context4.next = 6;\n                break;\n              }\n\n              token = getCookieFromRequest(req, 'jwt');\n              _context4.next = 4;\n              return _regeneratorRuntime.awrap(this.verifyToken(token));\n\n            case 4:\n              verifiedToken = _context4.sent;\n              return _context4.abrupt(\"return\", verifiedToken);\n\n            case 6:\n              return _context4.abrupt(\"return\", undefined);\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Client = new Auth0();\nexport default auth0Client;","map":null,"metadata":{},"sourceType":"module"}