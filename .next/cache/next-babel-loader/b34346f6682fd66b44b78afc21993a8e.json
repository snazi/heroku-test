{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport BaseLayout from '../layouts/BaseLayout';\nimport BasePage from '../common/BasePage/BasePage';\nconst namespace = 'http://localhost:3000/';\nexport default (role => {\n  return Component => {\n    return class withAuth extends React.Component {\n      static async getInitialProps(args) {\n        // this \"waits\" a check of the componentbeing passed down if it has getInitialProps and execute it\n        const pageProps = (await Component.getInitialProps) && (await Component.getInitialProps(args)); // destructurize the pageprops as a \"prop\" if we did not destructurize it we'd be passing a pageProps outside of a\n\n        return _objectSpread({}, pageProps);\n      }\n\n      renderProtectedPage() {\n        const {\n          isAuthenticated,\n          user\n        } = this.props.auth;\n        const userRole = user && user[`${namespace}role`];\n        let isAuthorized = false;\n\n        if (role) {\n          if (userRole && userRole === role) isAuthorized = true;\n        } else {\n          isAuthorized = true;\n        }\n\n        if (!isAuthenticated) {\n          return __jsx(\"div\", null, __jsx(BaseLayout, this.props.auth, __jsx(BasePage, null, __jsx(\"h1\", null, \"You're not isAuthenticated, please log in to access this page\"))));\n        } else if (!isAuthorized) {\n          return __jsx(\"div\", null, __jsx(BaseLayout, this.props.auth, __jsx(BasePage, null, __jsx(\"h1\", null, \"You're not Authroized, you dont have permission to access this page\"))));\n        } else {\n          return __jsx(Component, this.props);\n        }\n      }\n\n      render() {\n        return this.renderProtectedPage();\n      }\n\n    };\n  };\n});","map":null,"metadata":{},"sourceType":"module"}