{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback } from \"react\"; // Import the Slate editor factory.\n\nimport { createEditor, Editor, Transforms, Text } from 'slate'; // Import the Slate components and React plugin.\n\nimport { Slate, Editable, withReact } from 'slate-react';\nconst CustomEditor = {\n  isBoldMarkActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: n => n.bold === true,\n      universal: true\n    });\n    return !!match;\n  },\n\n  isCodeBlockActive(editor) {\n    const [match] = Editor.nodes(editor, {\n      match: n => n.type === 'code'\n    });\n    return !!match;\n  },\n\n  toggleBoldMark(editor) {\n    const isActive = CustomEditor.isBoldMarkActive(editor);\n    Transforms.setNodes(editor, {\n      bold: isActive ? null : true\n    }, {\n      match: n => Text.isText(n),\n      split: true\n    });\n  },\n\n  toggleCodeBlock(editor) {\n    const isActive = CustomEditor.isCodeBlockActive(editor);\n    Transforms.setNodes(editor, {\n      type: isActive ? null : 'code'\n    }, {\n      match: n => Editor.isBlock(editor, n)\n    });\n  }\n\n};\n\nconst DefaultElement = props => {\n  return __jsx(\"p\", props.attributes, props.children);\n};\n\nconst Leaf = props => {\n  return __jsx(\"span\", _extends({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? 'bold' : 'normal'\n    }\n  }), props.children);\n};\n\nconst SlateEditor = () => {\n  const editor = useMemo(() => withReact(createEditor()), []);\n  const {\n    0: value,\n    1: setValue\n  } = useState([{\n    type: 'paragraph',\n    children: [{\n      text: 'A line of text in a paragraph.'\n    }]\n  }]);\n  const renderLeaf = useCallback(props => {\n    return __jsx(Leaf, props);\n  }, []);\n  const renderElement = useCallback(props => {\n    switch (props.element.type) {\n      case 'code':\n        return __jsx(CodeElement, props);\n\n      default:\n        return __jsx(DefaultElement, props);\n    }\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: newValue => setValue(newValue)\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: event => {\n      if (!event.ctrlKey) {\n        return;\n      } // Replace the `onKeyDown` logic with our new commands.\n\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n      }\n    }\n  }));\n};\n\nexport default SlateEditor;","map":null,"metadata":{},"sourceType":"module"}