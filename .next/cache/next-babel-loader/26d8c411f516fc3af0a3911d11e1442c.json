{"ast":null,"code":"import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport { getCookieFromRequest } from '../helpers/utils';\nconst CLIENT_ID = \"Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ\";\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // both domain and client ID come from auth0 application settings on the dashboard\n      domain: 'dev-qo3dzhrn.auth0.com',\n      clientID: CLIENT_ID,\n      // redirectUri will replace the URL once you successfully log in\n      redirectUri: `${\"http://localhost:3000\"}/callback`,\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    }); // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\n\n    this.login = this.login.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        console.log(authResult);\n\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    });\n  } // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\n\n\n  setSession(authResult) {\n    // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\n    const expiresAt = JSON.stringify(authResult.expiresIn * 2000 + new Date().getTime());\n    Cookies.set('user', authResult.idTokenPayload);\n    Cookies.set('jwt', authResult.idToken);\n    Cookies.set('expiresAt', expiresAt);\n  }\n\n  logout() {\n    Cookies.remove('user');\n    Cookies.remove('jwt');\n    Cookies.remove('expiresAt');\n    this.auth0.logout({\n      returnTo: '',\n      clientID: CLIENT_ID\n    });\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  async getJWKS() {\n    const res = await axios.get('https://dev-qo3dzhrn.auth0.com/.well-known/jwks.json');\n    const jwks = res.data;\n    return jwks;\n  }\n\n  async verifyToken(token) {\n    if (token) {\n      const decodedToken = jwt.decode(token, {\n        complete: true\n      });\n\n      if (!decodedToken) {\n        return undefined;\n      }\n\n      const jwks = await this.getJWKS();\n      const jwk = jwks.keys[0]; // build certificate\n\n      let cert = jwk.x5c[0];\n      cert = cert.match(/.{1,64}/g).join('\\n');\n      cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`;\n\n      if (jwk.kid === decodedToken.header.kid) {\n        try {\n          const verifiedToken = jwt.verify(token, cert); // this multiplier is to convert miliseconds to seconds\n\n          const expiresAt = verifiedToken.exp * 1000;\n          return verifiedToken && new Date().getTime() < expiresAt ? verifiedToken : undefined;\n        } catch (err) {\n          return undefined;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  async clientAuth() {\n    const token = Cookies.getJSON('jwt');\n    const verifiedToken = await this.verifyToken(token);\n    return verifiedToken;\n  }\n\n  async serverAuth(req) {\n    if (req.headers.cookie) {\n      const token = getCookieFromRequest(req, 'jwt');\n      const verifiedToken = await this.verifyToken(token);\n      return verifiedToken;\n    }\n\n    return undefined;\n  }\n\n}\n\nconst auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["E:/Documents/Projects/heroku potfolio test/heroku-test/services/auth0.js"],"names":["auth0","Cookies","jwt","axios","getCookieFromRequest","CLIENT_ID","Auth0","constructor","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","handleAuthentication","logout","Promise","resolve","reject","parseHash","err","authResult","console","log","accessToken","idToken","setSession","expiresAt","JSON","stringify","expiresIn","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","getJWKS","res","get","jwks","data","verifyToken","token","decodedToken","decode","complete","undefined","jwk","keys","cert","x5c","match","join","kid","header","verifiedToken","verify","exp","clientAuth","getJSON","serverAuth","req","headers","cookie","auth0Client"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js'\r\nimport Cookies from 'js-cookie'\r\nimport jwt from 'jsonwebtoken'\r\nimport axios from 'axios'\r\n\r\nimport { getCookieFromRequest } from '../helpers/utils'\r\n\r\nconst CLIENT_ID = process.env.CLIENT_ID\r\n\r\nclass Auth0 {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      // both domain and client ID come from auth0 application settings on the dashboard\r\n      domain: 'dev-qo3dzhrn.auth0.com',\r\n      clientID: CLIENT_ID,\r\n      // redirectUri will replace the URL once you successfully log in\r\n      redirectUri:`${process.env.BASE_URL}/callback`,\r\n      responseType: 'token id_token',\r\n      scope: 'openid profile'\r\n    })\r\n    \r\n    // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\r\n    this.login = this.login.bind(this)\r\n    this.handleAuthentication = this.handleAuthentication.bind(this)\r\n    this.logout = this.logout.bind(this)\r\n\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        console.log(authResult)\r\n        if(authResult && authResult.accessToken && authResult.idToken) {\r\n          this.setSession(authResult)\r\n          resolve()\r\n        } else if (err) {\r\n          reject(err)\r\n          console.log(err)\r\n        }\r\n      })\r\n    })\r\n  }\r\n  // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\r\n  setSession(authResult) {\r\n    // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\r\n    const expiresAt = JSON.stringify((authResult.expiresIn * 2000) + new Date().getTime())\r\n\r\n    Cookies.set('user', authResult.idTokenPayload)\r\n    Cookies.set('jwt', authResult.idToken)\r\n    Cookies.set('expiresAt', expiresAt)\r\n  }\r\n\r\n  logout(){\r\n    Cookies.remove('user')\r\n    Cookies.remove('jwt')\r\n    Cookies.remove('expiresAt')\r\n\r\n    this.auth0.logout({\r\n      returnTo: '',\r\n      clientID: CLIENT_ID\r\n    })\r\n  }\r\n\r\n  login() {\r\n    this.auth0.authorize()\r\n  }\r\n\r\n  async getJWKS() {\r\n    const res = await axios.get('https://dev-qo3dzhrn.auth0.com/.well-known/jwks.json')\r\n    const jwks = res.data\r\n    return jwks\r\n  }\r\n\r\n  async verifyToken(token) {\r\n    if (token) {\r\n      const decodedToken = jwt.decode(token, { complete: true })\r\n\r\n      if(!decodedToken) { return undefined }\r\n\r\n      const jwks = await this.getJWKS()\r\n      const jwk = jwks.keys[0]\r\n\r\n      // build certificate\r\n      let cert = jwk.x5c[0]\r\n      cert = cert.match(/.{1,64}/g).join('\\n')\r\n      cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`\r\n    \r\n      if(jwk.kid === decodedToken.header.kid){\r\n        try {\r\n          const verifiedToken = jwt.verify(token, cert)\r\n          \r\n          // this multiplier is to convert miliseconds to seconds\r\n          const expiresAt = verifiedToken.exp * 1000\r\n\r\n          return (verifiedToken && new Date().getTime() < expiresAt ) ? verifiedToken : undefined\r\n\r\n        } catch(err){\r\n          return undefined\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  async clientAuth() {\r\n\r\n    const token = Cookies.getJSON('jwt')\r\n    const verifiedToken = await this.verifyToken(token)\r\n\r\n    return verifiedToken\r\n  }\r\n\r\n  async serverAuth(req) {\r\n    \r\n    if(req.headers.cookie){\r\n\r\n      \r\n\r\n      const token = getCookieFromRequest(req, 'jwt')\r\n      const verifiedToken = await this.verifyToken(token)\r\n\r\n      return verifiedToken\r\n\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n\r\n}\r\n\r\nconst auth0Client = new Auth0()\r\n\r\nexport default auth0Client"]},"metadata":{},"sourceType":"module"}