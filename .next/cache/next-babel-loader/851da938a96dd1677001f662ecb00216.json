{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useMemo, useState, useEffect } from 'react';\nimport isHotkey from 'is-hotkey';\nimport { Editable, withReact, useSlate, Slate } from 'slate-react';\nimport { Editor, Transforms, createEditor, Node, Text } from 'slate';\nimport { withHistory } from 'slate-history';\nimport ControllMenu from './ControllMenu';\nimport escapeHtml from 'escape-html';\nimport { jsx } from 'slate-hyperscript';\nimport { Button, Icon, Toolbar } from './components';\nvar HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code'\n};\nvar LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nvar serialize = function serialize(node) {\n  if (Text.isText(node)) {\n    return escapeHtml(node.text);\n  }\n\n  var children = node.children.map(function (n) {\n    return serialize(n);\n  }).join('');\n\n  switch (node.type) {\n    case 'block-quote':\n      return \"<blockquote><p>\".concat(children, \"</p></blockquote>\");\n\n    case 'paragraph':\n      return \"<p>\".concat(children, \"</p>\");\n\n    case 'link':\n      return \"<a href=\\\"\".concat(escapeHtml(node.url), \"\\\">\").concat(children, \"</a>\");\n\n    case 'code':\n      return \"ahahahah tangina\";\n\n    default:\n      return children;\n  }\n};\n\nvar deserialize = function deserialize(el) {\n  if (el.nodeType === 3) {\n    return el.textContent;\n  } else if (el.nodeType !== 1) {\n    return null;\n  }\n\n  var children = _Array$from(el.childNodes).map(deserialize);\n\n  switch (el.nodeName) {\n    case 'BODY':\n      return jsx('fragment', {}, children);\n\n    case 'BR':\n      return '\\n';\n\n    case 'BLOCKQUOTE':\n      return jsx('element', {\n        type: 'quote'\n      }, children);\n\n    case 'P':\n      return jsx('element', {\n        type: 'paragraph'\n      }, children);\n\n    case 'A':\n      return jsx('element', {\n        type: 'link',\n        url: el.getAttribute('href')\n      }, children);\n\n    default:\n      return el.textContent;\n  }\n};\n\nvar initializeEditorWithProps = function initializeEditorWithProps(props, setValue) {\n  useEffect(function () {\n    var document = new DOMParser().parseFromString(props.initialValue, 'text/html');\n\n    var _final = deserialize(document.body);\n\n    setValue(_final);\n  }, []);\n};\n\nvar getTitle = function getTitle(value) {\n  var firstBlock = serialize(value.children[0]);\n  var secondBlock = value.children[1] ? serialize(value.children[1]) : null;\n  console.log(firstBlock);\n  var title = firstBlock ? firstBlock : 'No Title';\n  var subtitle = secondBlock ? secondBlock : 'No Subtitle';\n  return {\n    title: title,\n    subtitle: subtitle\n  };\n};\n\nvar _save = function save(props, value) {\n  var headingValues = getTitle(value);\n  var text = serialize(value);\n  console.log(headingValues);\n  !props.isSaving && props.save(headingValues, text);\n};\n\nvar RichText = function RichText(props) {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  if (props.initialValue) useEffect(function () {\n    var document = new DOMParser().parseFromString(props.initialValue, 'text/html');\n\n    var _final2 = deserialize(document.body);\n\n    setValue(_final2);\n  }, []);\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, props);\n  }, []);\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, props);\n  }, []);\n  var editor = useMemo(function () {\n    return withHistory(withReact(createEditor()));\n  }, []);\n  var isSaving = props.isSaving;\n  return __jsx(React.Fragment, null, __jsx(ControllMenu, {\n    isSaving: isSaving,\n    save: function save() {\n      return _save(props, editor);\n    }\n  }), __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(Toolbar, null, __jsx(MarkButton, {\n    format: \"bold\",\n    icon: \"format_bold\"\n  }), __jsx(MarkButton, {\n    format: \"italic\",\n    icon: \"format_italic\"\n  }), __jsx(MarkButton, {\n    format: \"underline\",\n    icon: \"format_underlined\"\n  }), __jsx(MarkButton, {\n    format: \"code\",\n    icon: \"code\"\n  }), __jsx(BlockButton, {\n    format: \"heading-one\",\n    icon: \"looks_one\"\n  }), __jsx(BlockButton, {\n    format: \"heading-two\",\n    icon: \"looks_two\"\n  }), __jsx(BlockButton, {\n    format: \"block-quote\",\n    icon: \"format_quote\"\n  }), __jsx(BlockButton, {\n    format: \"numbered-list\",\n    icon: \"format_list_numbered\"\n  }), __jsx(BlockButton, {\n    format: \"bulleted-list\",\n    icon: \"format_list_bulleted\"\n  })), __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Enter some rich text\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    onKeyDown: function onKeyDown(event) {\n      for (var hotkey in HOTKEYS) {\n        if (isHotkey(hotkey, event)) {\n          event.preventDefault();\n          var mark = HOTKEYS[hotkey];\n          toggleMark(editor, mark);\n        }\n      }\n    }\n  })));\n};\n\nvar toggleBlock = function toggleBlock(editor, format) {\n  var isActive = isBlockActive(editor, format);\n  var isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: function match(n) {\n      return LIST_TYPES.includes(n.type);\n    },\n    split: true\n  });\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  });\n\n  if (!isActive && isList) {\n    var block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nvar toggleMark = function toggleMark(editor, format) {\n  var isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nvar isBlockActive = function isBlockActive(editor, format) {\n  var _Editor$nodes = Editor.nodes(editor, {\n    match: function match(n) {\n      return n.type === format;\n    }\n  }),\n      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n      match = _Editor$nodes2[0];\n\n  return !!match;\n};\n\nvar isMarkActive = function isMarkActive(editor, format) {\n  var marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nvar Element = function Element(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  switch (element.type) {\n    case 'block-quote':\n      return __jsx(\"blockquote\", attributes, children);\n\n    case 'bulleted-list':\n      return __jsx(\"ul\", attributes, children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", attributes, children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", attributes, children);\n\n    case 'list-item':\n      return __jsx(\"li\", attributes, children);\n\n    case 'numbered-list':\n      return __jsx(\"ol\", attributes, children);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nvar Leaf = function Leaf(_ref2) {\n  var attributes = _ref2.attributes,\n      children = _ref2.children,\n      leaf = _ref2.leaf;\n\n  if (leaf.bold) {\n    children = __jsx(\"strong\", null, children);\n  }\n\n  if (leaf.code) {\n    children = __jsx(\"code\", null, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", null, children);\n  }\n\n  if (leaf.underline) {\n    children = __jsx(\"u\", null, children);\n  }\n\n  return __jsx(\"span\", attributes, children);\n};\n\nvar BlockButton = function BlockButton(_ref3) {\n  var format = _ref3.format,\n      icon = _ref3.icon;\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isBlockActive(editor, format),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      toggleBlock(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nvar MarkButton = function MarkButton(_ref4) {\n  var format = _ref4.format,\n      icon = _ref4.icon;\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isMarkActive(editor, format),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      toggleMark(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nvar initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'This is editable '\n  }, {\n    text: 'rich',\n    bold: true\n  }, {\n    text: ' text, '\n  }, {\n    text: 'much',\n    italic: true\n  }, {\n    text: ' better than a '\n  }, {\n    text: '<textarea>',\n    code: true\n  }, {\n    text: '!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', or add a semantically rendered block quote in the middle of the page, like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    text: 'A wise quote.'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default RichText;","map":null,"metadata":{},"sourceType":"module"}