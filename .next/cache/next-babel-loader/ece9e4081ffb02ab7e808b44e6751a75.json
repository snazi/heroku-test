{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Slate, Editable, ReactEditor, withReact, useSlate } from 'slate-react';\nimport { Editor, Transforms, Text, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Menu, Portal } from './components';\nimport { Range } from 'slate';\n\nconst HoverMenu = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(HoveringToolbar, null), __jsx(Editable, {\n    renderLeaf: props => __jsx(Leaf, props),\n    placeholder: \"Enter some text...\",\n    onDOMBeforeInput: event => {\n      event.preventDefault();\n\n      switch (event.inputType) {\n        case 'formatBold':\n          return toggleFormat(editor, 'bold');\n\n        case 'formatItalic':\n          return toggleFormat(editor, 'italic');\n\n        case 'formatUnderline':\n          return toggleFormat(editor, 'underline');\n      }\n    }\n  }));\n};\n\nconst toggleFormat = (editor, format) => {\n  const isActive = isFormatActive(editor, format);\n  Transforms.setNodes(editor, {\n    [format]: isActive ? null : true\n  }, {\n    match: Text.isText,\n    split: true\n  });\n};\n\nconst isFormatActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n[format] === true,\n    mode: 'all'\n  });\n  return !!match;\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = __jsx(\"strong\", null, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", null, children);\n  }\n\n  if (leaf.underlined) {\n    children = __jsx(\"u\", null, children);\n  }\n\n  return __jsx(\"span\", attributes, children);\n};\n\nconst HoveringToolbar = () => {\n  const ref = useRef();\n  const editor = useSlate();\n  useEffect(() => {\n    const el = ref.current;\n    const {\n      selection\n    } = editor;\n\n    if (!el) {\n      return;\n    }\n\n    if (!selection || !ReactEditor.isFocused(editor) || Range.isCollapsed(selection) || Editor.string(editor, selection) === '') {\n      el.removeAttribute('style');\n      return;\n    }\n\n    const domSelection = window.getSelection();\n    const domRange = domSelection.getRangeAt(0);\n    const rect = domRange.getBoundingClientRect();\n    el.style.opacity = 1;\n    el.style.top = `${rect.top + window.pageYOffset - el.offsetHeight}px`;\n    el.style.left = `${rect.left + window.pageXOffset - el.offsetWidth / 2 + rect.width / 2}px`;\n  });\n  return __jsx(Portal, null, __jsx(Menu, {\n    ref: ref,\n    className: css`\n          padding: 8px 7px 6px;\n          position: absolute;\n          z-index: 1;\n          top: -10000px;\n          left: -10000px;\n          margin-top: -6px;\n          opacity: 0;\n          background-color: #222;\n          border-radius: 4px;\n          transition: opacity 0.75s;\n        `\n  }, __jsx(FormatButton, {\n    format: \"bold\",\n    icon: \"format_bold\"\n  }), __jsx(FormatButton, {\n    format: \"italic\",\n    icon: \"format_italic\"\n  }), __jsx(FormatButton, {\n    format: \"underlined\",\n    icon: \"format_underlined\"\n  })));\n};\n\nconst FormatButton = ({\n  format,\n  icon\n}) => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    reversed: true,\n    active: isFormatActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleFormat(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'This example shows how you can make a hovering menu appear above your content, which you can use to make text '\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', '\n  }, {\n    text: 'italic',\n    italic: true\n  }, {\n    text: ', or anything else you might want to do!'\n  }]\n}, {\n  children: [{\n    text: 'Try it out yourself! Just '\n  }, {\n    text: 'select any piece of text and the menu will appear',\n    bold: true\n  }, {\n    text: '.'\n  }]\n}];\nexport default HoverMenu;","map":null,"metadata":{},"sourceType":"module"}