{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Header from '../components/common/Header/Header';\nimport BaseLayout from '../components/layouts/BaseLayout';\nimport axios from 'axios';\nexport var Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  _createClass(Index, null, [{\n    key: \"getInitialProps\",\n    value: function getInitialProps() {\n      var userData, response;\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // this console log will only show up in the SERVER side not the client. The only way for this to show up on the client is when you access this component again.\n              console.log('get initial props');\n              userData = {};\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(axios.get('https://jsonplaceholder.typicode.com/todos/1'));\n\n            case 5:\n              response = _context.sent;\n              userData = response.data;\n              console.log(response.data);\n              _context.next = 13;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](2);\n              console.error(_context.t0);\n\n            case 13:\n              return _context.abrupt(\"return\", {\n                userData: userData\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 10]]);\n    } // constructor will be called first\n\n  }]);\n\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this)); // this state is special for class components. They are data you can use\n\n    _this.state = {\n      title: 'I am title page'\n    };\n    console.log('constructor');\n    return _this;\n  } //did mount will always fire whenever everything is done executed\n\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('component did mount');\n    } //will be called whenever an update happens\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log('component did update');\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('component will unmount');\n    }\n  }, {\n    key: \"updateTitle\",\n    value: function updateTitle() {\n      this.setState({\n        title: 'wew'\n      });\n    } // then 2nd to be called is render()\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('render'); // this is called destructuring. Im taking the reference to this.state.title and assigning it to variable title\n\n      var title = this.state.title; //this is what i threw up there before in getInitialProps\n\n      var userData = this.props.userData; // const title = this.state.title is the equivalent of the code above.\n\n      return __jsx(\"div\", null, __jsx(BaseLayout, null, __jsx(\"h1\", null, \"Welcome to Index Poasaage\"), __jsx(\"h2\", null, title), __jsx(\"h2\", null, userData.title), __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.updateTitle();\n        }\n      }, \"Change title\")));\n    }\n  }]);\n\n  return Index;\n}(Component);\nexport default Index;","map":{"version":3,"sources":["E:/Documents/Projects/portfolio/pages/index.jsx"],"names":["React","Component","Header","BaseLayout","axios","Index","console","log","userData","get","response","data","error","state","title","setState","props","updateTitle"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,WAAaC,KAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACIC,cAAAA,QALZ,GAKsB,EALtB;AAAA;AAAA;AAAA,+CAOmCJ,KAAK,CAACK,GAAN,CAAU,8CAAV,CAPnC;;AAAA;AAOkBC,cAAAA,QAPlB;AAQYF,cAAAA,QAAQ,GAAGE,QAAQ,CAACC,IAApB;AACAL,cAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACC,IAArB;AATZ;AAAA;;AAAA;AAAA;AAAA;AAWYL,cAAAA,OAAO,CAACM,KAAR;;AAXZ;AAAA,+CAgBe;AAACJ,gBAAAA,QAAQ,EAARA;AAAD,eAhBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBI;;AAlBJ;;AAmBI,mBAAc;AAAA;;AAAA;;AACV,gFADU,CAEV;;AACA,UAAKK,KAAL,GAAa;AACVC,MAAAA,KAAK,EAAE;AADG,KAAb;AAIAR,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAPU;AAQb,GA3BL,CA4BI;;;AA5BJ;AAAA;AAAA,wCA6BuB;AACfD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KA/BL,CAgCI;;AAhCJ;AAAA;AAAA,yCAiCyB;AACjBD,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;AAnCL;AAAA;AAAA,2CAqC2B;AAClBD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACJ;AAvCL;AAAA;AAAA,kCAyCkB;AACV,WAAKQ,QAAL,CAAc;AAAED,QAAAA,KAAK,EAAE;AAAT,OAAd;AACH,KA3CL,CA6CI;;AA7CJ;AAAA;AAAA,6BA8Ca;AAAA;;AACLR,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EADK,CAEL;;AAFK,UAGEO,KAHF,GAGW,KAAKD,KAHhB,CAGEC,KAHF,EAIL;;AAJK,UAKEN,QALF,GAKc,KAAKQ,KALnB,CAKER,QALF,EAML;;AACA,aACI,mBAEI,MAAC,UAAD,QACI,8CADJ,EAEI,kBAAKM,KAAL,CAFJ,EAGI,kBAAKN,QAAQ,CAACM,KAAd,CAHJ,EAKI;AAAQ,QAAA,OAAO,EAAG;AAAA,iBAAM,MAAI,CAACG,WAAL,EAAN;AAAA;AAAlB,wBALJ,CAFJ,CADJ;AAYH;AAjEL;;AAAA;AAAA,EAA2BhB,SAA3B;AAoEA,eAAeI,KAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Header from '../components/common/Header/Header'\r\nimport BaseLayout from '../components/layouts/BaseLayout'\r\nimport axios from 'axios'\r\nexport class Index extends Component {\r\n\r\n    static async getInitialProps() {\r\n        // this console log will only show up in the SERVER side not the client. The only way for this to show up on the client is when you access this component again.\r\n        console.log('get initial props')\r\n        let userData ={}\r\n        try {\r\n            const response = await axios.get('https://jsonplaceholder.typicode.com/todos/1')\r\n            userData = response.data\r\n            console.log(response.data);\r\n          } catch (error) {\r\n            console.error(error)\r\n          }\r\n        //take note at the end of this line, this function is an async task. This means that its execution lives outside and its execution is not sequential to the original\r\n        //turned getInitialProps into an async function. through the try catch function, it runs the code and if theres an error anywhere, throw a console log of the error.\r\n        // I am throwing userData to the component as a props\r\n        return {userData}\r\n    }\r\n    // constructor will be called first\r\n    constructor() {\r\n        super()\r\n        // this state is special for class components. They are data you can use\r\n        this.state = {\r\n           title: 'I am title page' \r\n        }\r\n        \r\n        console.log('constructor')\r\n    }\r\n    //did mount will always fire whenever everything is done executed\r\n    componentDidMount(){\r\n        console.log('component did mount')\r\n    }\r\n    //will be called whenever an update happens\r\n    componentDidUpdate() {\r\n        console.log('component did update')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n         console.log('component will unmount')\r\n    }\r\n\r\n    updateTitle() {\r\n        this.setState({ title: 'wew' })\r\n    }\r\n\r\n    // then 2nd to be called is render()\r\n    render() {\r\n        console.log('render')\r\n        // this is called destructuring. Im taking the reference to this.state.title and assigning it to variable title\r\n        const {title} = this.state\r\n        //this is what i threw up there before in getInitialProps\r\n        const {userData} = this.props\r\n        // const title = this.state.title is the equivalent of the code above.\r\n        return (\r\n            <div>\r\n            \r\n                <BaseLayout>\r\n                    <h1>Welcome to Index Poasaage</h1>\r\n                    <h2>{title}</h2>\r\n                    <h2>{userData.title}</h2>\r\n                    {/* this button's onClick property executes a function denoted by the arrow => function which fires updateTitle() */}\r\n                    <button onClick={ () => this.updateTitle()}>Change title</button>\r\n                </BaseLayout>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index"]},"metadata":{},"sourceType":"module"}