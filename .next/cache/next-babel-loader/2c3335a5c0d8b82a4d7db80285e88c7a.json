{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport App, { Container } from 'next/app';\nimport auth0 from '../services/auth0';\nimport Fonts from '../helpers/Fonts'; //styling\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../components/common/styles/main.scss';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // TODO: once finished with entire project, use the current implementation, this is depcrated.\n// const namespace = 'http://localhost:3000'\n\nexport default class MyApp extends App {\n  static async getInitialProps({\n    Component,\n    router,\n    ctx\n  }) {\n    let pageProps = {};\n    const user = false ? await auth0.clientAuth() : await auth0.serverAuth(ctx.req);\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    let isAuthenticated = false;\n\n    if (user) {\n      isAuthenticated = true;\n    }\n\n    const isSiteOwner = user && user[\"http://amadora.tech/role\"] === 'siteOwner'; // now that we've managed to give auth details to both client and server side, we should pass the auth data to our pages\n\n    const auth = {\n      user,\n      isAuthenticated: !!user,\n      isSiteOwner\n    }; // return auth as well as page props\n\n    return {\n      pageProps,\n      auth\n    };\n  }\n\n  componentDidMount() {\n    Fonts();\n  }\n\n  render() {\n    // pass it along\n    const {\n      Component,\n      pageProps,\n      auth\n    } = this.props; // create an auth prop and pass this current instance of auth.\n\n    return __jsx(Container, null, __jsx(ToastContainer, null), __jsx(Component, _extends({}, pageProps, {\n      auth: auth\n    })));\n  }\n\n}","map":{"version":3,"sources":["E:/Documents/Code Projects/Portfolio/heroku-test/pages/_app.js"],"names":["React","App","Container","auth0","Fonts","ToastContainer","toast","MyApp","getInitialProps","Component","router","ctx","pageProps","user","clientAuth","serverAuth","req","isAuthenticated","isSiteOwner","auth","componentDidMount","render","props"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,IAAaC,SAAb,QAA6B,UAA7B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB,C,CAEA;;AACA,OAAO,sCAAP;AACA,OAAO,uCAAP;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP,C,CACA;AACA;;AAEA,eAAe,MAAMC,KAAN,SAAoBN,GAApB,CAAwB;AACnC,eAAaO,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,GAA7B,EAAyD;AAErD,QAAIC,SAAS,GAAG,EAAhB;AAEA,UAAMC,IAAI,GAAG,QAAkB,MAAMV,KAAK,CAACW,UAAN,EAAxB,GAA6C,MAAMX,KAAK,CAACY,UAAN,CAAiBJ,GAAG,CAACK,GAArB,CAAhE;;AAEA,QAAGP,SAAS,CAACD,eAAb,EAA6B;AACzBI,MAAAA,SAAS,GAAG,MAAMH,SAAS,CAACD,eAAV,CAA0BG,GAA1B,CAAlB;AACH;;AAED,QAAIM,eAAe,GAAG,KAAtB;;AACA,QAAGJ,IAAH,EAAQ;AACJI,MAAAA,eAAe,GAAG,IAAlB;AACH;;AAED,UAAMC,WAAW,GAAGL,IAAI,IAAIA,IAAI,4BAAJ,KAAwC,WAApE,CAfqD,CAiBrD;;AACA,UAAMM,IAAI,GAAG;AAAEN,MAAAA,IAAF;AAAQI,MAAAA,eAAe,EAAE,CAAC,CAACJ,IAA3B;AAAiCK,MAAAA;AAAjC,KAAb,CAlBqD,CAoBrD;;AACA,WAAO;AAAEN,MAAAA,SAAF;AAAaO,MAAAA;AAAb,KAAP;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBhB,IAAAA,KAAK;AACR;;AAEDiB,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEZ,MAAAA,SAAF;AAAaG,MAAAA,SAAb;AAAwBO,MAAAA;AAAxB,QAAiC,KAAKG,KAA5C,CAFK,CAGL;;AACA,WACI,MAAC,SAAD,QACI,MAAC,cAAD,OADJ,EAEI,MAAC,SAAD,eAAeV,SAAf;AAA2B,MAAA,IAAI,EAAEO;AAAjC,OAFJ,CADJ;AAMH;;AAvCkC","sourcesContent":["import React from 'react'\r\nimport App, {Container} from 'next/app'\r\nimport auth0 from '../services/auth0'\r\nimport Fonts from '../helpers/Fonts'\r\n\r\n//styling\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../components/common/styles/main.scss'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n// TODO: once finished with entire project, use the current implementation, this is depcrated.\r\n// const namespace = 'http://localhost:3000'\r\n\r\nexport default class MyApp extends App {\r\n    static async getInitialProps({ Component, router, ctx }) {\r\n\r\n        let pageProps = {}\r\n\r\n        const user = process.browser ? await auth0.clientAuth() : await auth0.serverAuth(ctx.req)\r\n        \r\n        if(Component.getInitialProps){\r\n            pageProps = await Component.getInitialProps(ctx)\r\n        }\r\n\r\n        let isAuthenticated = false\r\n        if(user){\r\n            isAuthenticated = true\r\n        }\r\n\r\n        const isSiteOwner = user && user[process.env.NAMESPACE+'/role'] === 'siteOwner'\r\n\r\n        // now that we've managed to give auth details to both client and server side, we should pass the auth data to our pages\r\n        const auth = { user, isAuthenticated: !!user, isSiteOwner  }\r\n\r\n        // return auth as well as page props\r\n        return { pageProps, auth }\r\n    }\r\n\r\n    componentDidMount() {\r\n        Fonts()\r\n    }\r\n\r\n    render() {\r\n        // pass it along\r\n        const { Component, pageProps, auth } = this.props\r\n        // create an auth prop and pass this current instance of auth.\r\n        return (\r\n            <Container>\r\n                <ToastContainer />\r\n                <Component {...pageProps } auth={auth} />\r\n            </Container>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}