{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { getCookieFromRequest } from '../helpers/utils';\nconst axiosInstance = axios.create({\n  baseURL: `${\"http://localhost:3000\"}/api/v1`,\n  timeout: 3000\n});\n\nconst setAuthHeader = req => {\n  const token = req ? getCookieFromRequest(req, 'jwt') : Cookies.getJSON('jwt');\n\n  if (token) {\n    return {\n      headers: {\n        'authorization': `Bearer ${token}`\n      }\n    };\n  }\n\n  return undefined;\n};\n\nconst rejectPromise = resError => {\n  let error = {};\n\n  if (resError && resError.response && resError.response.data) {\n    error = resError.response.data;\n  } else {\n    error = resError;\n  }\n\n  return Promise.reject(error);\n};\n\nexport const getSecretData = async req => {\n  const url = req ? '/secret' : '/api/v1/secret';\n  return await axiosInstance.get(url, setAuthHeader(req)).then(response => response.data);\n}; // export const getSecretDataServer = async (req) => {\n//     return await axios.get('http://localhost:3000/api/v1/secret', setAuthHeader(req) ).then( response => response.data )\n// }\n\nexport const getPortfolios = async () => {\n  const url = '/portfolios';\n  return await axiosInstance.get(url).then(response => response.data);\n};\nexport const createPortfolio = async portfolioData => {\n  const url = '/portfolios';\n  return await axiosInstance.post(url, portfolioData, setAuthHeader()).then(response => response.data).catch(error => {\n    return rejectPromise(error);\n  });\n};\nexport const getPortfolioById = async id => {\n  return await axiosInstance.get(`/portfolios/${id}`).then(response => response.data);\n};\nexport const updatePortfolio = async portfolioData => {\n  const url = `/portfolios/${portfolioData._id}`;\n  return await axiosInstance.patch(url, portfolioData, setAuthHeader()).then(response => response.data).catch(error => {\n    return rejectPromise(error);\n  });\n};\nexport const deletePortfolio = id => {\n  return axiosInstance.delete(`/portfolios/${id}`, setAuthHeader()).then(response => response.data);\n}; // BLOG ACTIONS\n\nexport const getBlogs = async req => {\n  return await axiosInstance.get('/blogs').then(response => response.data);\n};\nexport const getBlogBySlug = async slug => {\n  return await axiosInstance.get(`/blogs/s/${slug}`).then(response => response.data);\n};\nexport const getUserBlogs = async req => {\n  return await axiosInstance.get('/blogs/me', setAuthHeader(req)).then(response => response.data);\n};\nexport const saveBlog = blogData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Promise Resolved!');\n    }, 1000);\n  });\n};\nexport const createBlog = (blogData, lockId) => {\n  return axiosInstance.post(`/blogs?lockId=${lockId}`, blogData, setAuthHeader()).then(response => response.data).catch(err => rejectPromise(err));\n};\nexport const getBlogById = async id => {\n  return await axiosInstance.get(`/blogs/${id}`).then(response => response.data);\n};\nexport const updateBlog = async (blogData, blogId) => {\n  return axiosInstance.patch(`/blogs/${blogId}`, blogData, setAuthHeader()).then(response => response.data).catch(err => rejectPromise(err));\n};\nexport const deleteBlog = blogId => {\n  return axiosInstance.delete(`/blogs/${blogId}`, setAuthHeader()).then(response => response.data).catch(err => rejectPromise(err));\n};","map":{"version":3,"sources":["E:/Documents/Code Projects/Portfolio/heroku-test/actions/index.js"],"names":["axios","Cookies","getCookieFromRequest","axiosInstance","create","baseURL","timeout","setAuthHeader","req","token","getJSON","headers","undefined","rejectPromise","resError","error","response","data","Promise","reject","getSecretData","url","get","then","getPortfolios","createPortfolio","portfolioData","post","catch","getPortfolioById","id","updatePortfolio","_id","patch","deletePortfolio","delete","getBlogs","getBlogBySlug","slug","getUserBlogs","saveBlog","blogData","resolve","setTimeout","createBlog","lockId","err","getBlogById","updateBlog","blogId","deleteBlog"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport Cookies from 'js-cookie'\r\nimport { getCookieFromRequest } from '../helpers/utils'\r\n\r\n\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: `${process.env.BASE_URL}/api/v1`,\r\n    timeout: 3000\r\n})\r\n\r\nconst setAuthHeader = (req) => {\r\n    const token = req ? getCookieFromRequest(req,'jwt') : Cookies.getJSON('jwt')\r\n\r\n    if(token) {\r\n        return {headers: {'authorization': `Bearer ${token}`}}\r\n    }\r\n\r\n    return undefined\r\n}\r\n\r\nconst rejectPromise = (resError) => {\r\n    let error = {}\r\n\r\n    if(resError && resError.response && resError.response.data) {\r\n        error = resError.response.data\r\n    } else {\r\n        error = resError\r\n    }\r\n\r\n    return Promise.reject(error)\r\n}\r\n\r\nexport const getSecretData = async (req) => {\r\n\r\n    const url = req ? '/secret' : '/api/v1/secret'\r\n\r\n    return await axiosInstance.get(url, setAuthHeader(req) ).then( response => response.data )\r\n}\r\n\r\n// export const getSecretDataServer = async (req) => {\r\n//     return await axios.get('http://localhost:3000/api/v1/secret', setAuthHeader(req) ).then( response => response.data )\r\n// }\r\n\r\nexport const getPortfolios = async () => {\r\n    const url =  '/portfolios'\r\n\r\n    return await axiosInstance.get(url).then( response => response.data )\r\n}\r\n\r\nexport const createPortfolio = async (portfolioData) => {\r\n    const url =  '/portfolios'\r\n\r\n    return await axiosInstance.post(url, portfolioData, setAuthHeader()).then( response => response.data )\r\n    .catch(error => {return rejectPromise(error)})\r\n}\r\n\r\nexport const getPortfolioById = async (id) => {\r\n    return await axiosInstance.get(`/portfolios/${id}`).then(response => response.data)\r\n}\r\n\r\nexport const updatePortfolio = async (portfolioData) => {\r\n    const url =  `/portfolios/${portfolioData._id}`\r\n\r\n    return await axiosInstance.patch(url, portfolioData, setAuthHeader())\r\n    .then( response => response.data )\r\n    .catch(error => {\r\n        return rejectPromise(error)\r\n    })\r\n}\r\n\r\nexport const deletePortfolio = (id) => {\r\n    return axiosInstance.delete(`/portfolios/${id}`, setAuthHeader())\r\n        .then( response => response.data )\r\n}\r\n\r\n// BLOG ACTIONS\r\nexport const getBlogs = async (req) => {\r\n    return await axiosInstance.get('/blogs').then(response => response.data)\r\n}\r\n\r\nexport const getBlogBySlug = async (slug) => {\r\n    return await axiosInstance.get(`/blogs/s/${slug}`).then(response => response.data)\r\n}\r\n\r\nexport const getUserBlogs = async (req) => {\r\n    return await axiosInstance.get('/blogs/me', setAuthHeader(req)).then(response => response.data)\r\n}\r\n\r\nexport const saveBlog = (blogData) => {\r\n    return new Promise( (resolve, reject) => {\r\n        setTimeout( () => {\r\n            resolve('Promise Resolved!')\r\n        }, 1000)\r\n    })\r\n}\r\n\r\nexport const createBlog = (blogData, lockId) => {\r\n    return axiosInstance.post(`/blogs?lockId=${lockId}`, blogData, setAuthHeader())\r\n            .then(response => response.data)\r\n            .catch(err => rejectPromise(err))\r\n}\r\n\r\nexport const getBlogById = async (id) => {\r\n    return await axiosInstance.get(`/blogs/${id}`).then(response => response.data)\r\n}\r\n\r\nexport const updateBlog = async (blogData, blogId) => {\r\n    return axiosInstance.patch(`/blogs/${blogId}`, blogData, setAuthHeader())\r\n            .then(response => response.data)\r\n            .catch(err => rejectPromise(err))\r\n}\r\n\r\nexport const deleteBlog = (blogId) => {\r\n    return axiosInstance.delete(`/blogs/${blogId}`, setAuthHeader())\r\n            .then(response => response.data)\r\n            .catch(err => rejectPromise(err))\r\n}"]},"metadata":{},"sourceType":"module"}