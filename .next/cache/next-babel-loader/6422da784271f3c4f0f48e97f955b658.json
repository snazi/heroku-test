{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { Children } from 'react';\nimport { Link } from '../routes';\nimport { withRouter } from 'next/router';\n\nvar ActiveLink = function ActiveLink(_ref) {\n  var children = _ref.children,\n      router = _ref.router,\n      props = _objectWithoutProperties(_ref, [\"children\", \"router\"]);\n\n  var child = Children.only(children);\n  var className = child.props.className;\n\n  if (router.asPath === props.route && props.activeClassName) {\n    className = \"\".concat(className, \" \").concat(props.activeClassName);\n  }\n\n  delete props.activeClassName;\n  return __jsx(Link, props, React.cloneElement(child, {\n    className: className\n  }));\n};\n\nexport default withRouter(ActiveLink);","map":{"version":3,"sources":["E:/Documents/Code Projects/Portfolio/heroku-test/components/ActiveLink.js"],"names":["React","Children","Link","withRouter","ActiveLink","children","router","props","child","only","className","asPath","route","activeClassName","cloneElement"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAkC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,MAAsB,QAAtBA,MAAsB;AAAA,MAAXC,KAAW;;AACjD,MAAMC,KAAK,GAAGP,QAAQ,CAACQ,IAAT,CAAcJ,QAAd,CAAd;AACA,MAAIK,SAAS,GAAGF,KAAK,CAACD,KAAN,CAAYG,SAA5B;;AAEA,MAAIJ,MAAM,CAACK,MAAP,KAAkBJ,KAAK,CAACK,KAAxB,IAAiCL,KAAK,CAACM,eAA3C,EAA4D;AACxDH,IAAAA,SAAS,aAAMA,SAAN,cAAmBH,KAAK,CAACM,eAAzB,CAAT;AACH;;AAED,SAAON,KAAK,CAACM,eAAb;AAEA,SAAO,MAAC,IAAD,EAAUN,KAAV,EAAkBP,KAAK,CAACc,YAAN,CAAmBN,KAAnB,EAA0B;AAACE,IAAAA,SAAS,EAATA;AAAD,GAA1B,CAAlB,CAAP;AACH,CAXD;;AAaA,eAAeP,UAAU,CAACC,UAAD,CAAzB","sourcesContent":["import React, {Children} from 'react'\r\nimport { Link } from '../routes'\r\nimport { withRouter } from 'next/router'\r\n\r\nconst ActiveLink = ({children, router, ...props}) => {\r\n    const child = Children.only(children)\r\n    let className = child.props.className\r\n\r\n    if (router.asPath === props.route && props.activeClassName) {\r\n        className = `${className} ${props.activeClassName}`\r\n    }\r\n\r\n    delete props.activeClassName\r\n\r\n    return <Link {...props}>{React.cloneElement(child, {className})}</Link>\r\n}\r\n\r\nexport default withRouter(ActiveLink)"]},"metadata":{},"sourceType":"module"}