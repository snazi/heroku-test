{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { getCookieFromRequest } from '../helpers/utils';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:3000/api/v1',\n  timeout: 3000\n});\n\nconst setAuthHeader = req => {\n  const token = req ? getCookieFromRequest(req, 'jwt') : Cookies.getJSON('jwt');\n\n  if (token) {\n    return {\n      headers: {\n        'authorization': `Bearer ${token}`\n      }\n    };\n  }\n\n  return undefined;\n};\n\nconst rejectPromise = resError => {\n  let error = {};\n\n  if (resError && resError.response && resError.response.data) {\n    error = resError.response.data;\n  } else {\n    error = resError;\n  }\n\n  return Promise.reject(error);\n};\n\nexport const getSecretData = async req => {\n  const url = req ? '/secret' : '/api/v1/secret';\n  return await axiosInstance.get(url, setAuthHeader(req)).then(response => response.data);\n}; // export const getSecretDataServer = async (req) => {\n//     return await axios.get('http://localhost:3000/api/v1/secret', setAuthHeader(req) ).then( response => response.data )\n// }\n\nexport const getPortfolios = async () => {\n  const url = '/portfolios';\n  return await axiosInstance.get(url).then(response => response.data);\n};\nexport const createPortfolio = async portfolioData => {\n  const url = '/portfolios';\n  return await axiosInstance.post(url, portfolioData, setAuthHeader()).then(response => response.data).catch(error => {\n    return rejectPromise(error);\n  });\n};\nexport const getPortfolioById = async id => {\n  return await axiosInstance.get(`/portfolios/${id}`).then(response => response.data);\n};\nexport const updatePortfolio = async portfolioData => {\n  const url = `/portfolios/${portfolioData._id}`;\n  return await axiosInstance.patch(url, portfolioData, setAuthHeader()).then(response => response.data).catch(error => {\n    return rejectPromise(error);\n  });\n};\nexport const deletePortfolio = id => {\n  return axiosInstance.delete(`/portfolios/${id}`, setAuthHeader()).then(response => response.data);\n}; // BLOG ACTIONS\n\nexport const getBlogs = async req => {\n  return await axiosInstance.get('/blogs').then(response => response.data);\n};\nexport const getBlogBySlug = async slug => {\n  return await axiosInstance.get(`/blogs/s/${slug}`).then(response => response.data);\n};\nexport const getUserBlogs = async req => {\n  return await axiosInstance.get('/blogs/me', setAuthHeader(req)).then(response => response.data);\n};\nexport const saveBlog = blogData => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve('Promise Resolved!');\n    }, 1000);\n  });\n};\nexport const createBlog = (blogData, lockId) => {\n  return axiosInstance.post(`/blogs?lockId=${lockId}`, blogData, setAuthHeader()).then(response => response.data).catch(err => rejectPromise(err));\n};\nexport const getBlogById = async id => {\n  return await axiosInstance.get(`/blogs/${id}`).then(response => response.data);\n};\nexport const updateBlog = async (blogData, blogId) => {\n  return axiosInstance.patch(`/blogs/${blogId}`, blogData, setAuthHeader()).then(response => response.data).catch(err => rejectPromise(err));\n};\nexport const deleteBlog = blogId => {\n  return axiosInstance.delete(`/blogs/${blogId}`, setAuthHeader()).then(response => response.data).catch(err => rejectPromise(err));\n};","map":null,"metadata":{},"sourceType":"module"}