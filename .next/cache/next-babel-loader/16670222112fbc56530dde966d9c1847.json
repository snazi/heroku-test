{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Button, Label, Input, FormGroup } from 'reactstrap';\nimport './style.scss';\n\nconst PortInput = (_ref) => {\n  let {\n    label,\n    type,\n    field,\n    // { name, value, onChange, onBlur }\n    form: {\n      touched,\n      errors\n    }\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"type\", \"field\", \"form\"]);\n\n  return __jsx(FormGroup, null, __jsx(Label, null, label), __jsx(Input, _extends({\n    type: type\n  }, field, props)), touched[field.name] && errors[field.name] && __jsx(\"div\", {\n    className: \"error\"\n  }, errors[field.name]));\n};\n\nexport default PortInput;","map":{"version":3,"sources":["E:/Documents/Projects/heroku potfolio test/heroku-test/components/form/PortInput.js"],"names":["Button","Label","Input","FormGroup","PortInput","label","type","field","form","touched","errors","props","name"],"mappings":";;;;;;;;;AAAA,SAAQA,MAAR,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,SAA9B,QAA8C,YAA9C;AACA,OAAO,cAAP;;AAEA,MAAMC,SAAS,GAAG;AAAA,MAAC;AACfC,IAAAA,KADe;AAEfC,IAAAA,IAFe;AAGfC,IAAAA,KAHe;AAGR;AACPC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AAJS,GAAD;AAAA,MAKXC,KALW;;AAAA,SAOd,MAAC,SAAD,QACI,MAAC,KAAD,QAAQN,KAAR,CADJ,EAEE,MAAC,KAAD;AAAO,IAAA,IAAI,EAAEC;AAAb,KAAuBC,KAAvB,EAAkCI,KAAlC,EAFF,EAGGF,OAAO,CAACF,KAAK,CAACK,IAAP,CAAP,IACCF,MAAM,CAACH,KAAK,CAACK,IAAP,CADP,IACuB;AAAK,IAAA,SAAS,EAAC;AAAf,KAAwBF,MAAM,CAACH,KAAK,CAACK,IAAP,CAA9B,CAJ1B,CAPc;AAAA,CAAlB;;AAeE,eAAeR,SAAf","sourcesContent":["import {Button, Label, Input, FormGroup} from 'reactstrap'\r\nimport './style.scss'\r\n\r\nconst PortInput = ({\r\n    label,\r\n    type,\r\n    field, // { name, value, onChange, onBlur }\r\n    form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\r\n    ...props\r\n  }) => (\r\n    <FormGroup>\r\n        <Label>{label}</Label>\r\n      <Input type={type} {...field} {...props} />\r\n      {touched[field.name] &&\r\n        errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\r\n    </FormGroup>\r\n  );\r\n\r\n  export default PortInput"]},"metadata":{},"sourceType":"module"}