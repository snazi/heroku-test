{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"E:\\\\Documents\\\\Projects\\\\portfolio\\\\pages\\\\index.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Header from '../components/common/Header/Header';\nimport BaseLayout from '../components/layouts/BaseLayout';\nexport var Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  // constructor will be called first\n  function Index() {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this)); // this state is special for class components. They are data you can use\n\n    _this.state = {\n      title: 'I am title page'\n    };\n    console.log('constructor');\n    return _this;\n  } //did mount will always fire whenever everything is done executed\n\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('component did mount');\n    } //will be called whenever an update happens\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      console.log('component did update');\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log('component will unmount');\n    }\n  }, {\n    key: \"updateTitle\",\n    value: function updateTitle() {\n      this.setState({\n        title: 'wew'\n      });\n    } // then 2nd to be called is render()\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log('render'); // this is called destructuring. Im taking the reference to this.state.title and assigning it to variable title\n\n      var title = this.state.title; // const title = this.state.title is the equivalent of the code above.\n\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, __jsx(BaseLayout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Welcome to Index Poasaage\"), __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, title), __jsx(\"button\", {\n        onClick: function onClick() {\n          return _this2.updateTitle();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Change title\")));\n    }\n  }]);\n\n  return Index;\n}(Component);\nexport default Index;","map":{"version":3,"sources":["E:/Documents/Projects/portfolio/pages/index.jsx"],"names":["React","Component","Header","BaseLayout","Index","state","title","console","log","setState","updateTitle"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,WAAaC,KAAb;AAAA;AAAA;AAAA;;AACI;AACA,mBAAc;AAAA;;AAAA;;AACV,gFADU,CAEV;;AACA,UAAKC,KAAL,GAAa;AACVC,MAAAA,KAAK,EAAE;AADG,KAAb;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAPU;AAQb,GAVL,CAWI;;;AAXJ;AAAA;AAAA,wCAYuB;AACfD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACH,KAdL,CAeI;;AAfJ;AAAA;AAAA,yCAgByB;AACjBD,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;AAlBL;AAAA;AAAA,2CAoB2B;AAClBD,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACJ;AAtBL;AAAA;AAAA,kCAwBkB;AACV,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE;AAAT,OAAd;AACH,KA1BL,CA4BI;;AA5BJ;AAAA;AAAA,6BA6Ba;AAAA;;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EADK,CAEL;;AAFK,UAGEF,KAHF,GAGW,KAAKD,KAHhB,CAGEC,KAHF,EAIL;;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKA,KAAL,CAFJ,EAII;AAAQ,QAAA,OAAO,EAAG;AAAA,iBAAM,MAAI,CAACI,WAAL,EAAN;AAAA,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ,CAFJ,CADJ;AAWH;AA7CL;;AAAA;AAAA,EAA2BT,SAA3B;AAgDA,eAAeG,KAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport Header from '../components/common/Header/Header'\r\nimport BaseLayout from '../components/layouts/BaseLayout'\r\nexport class Index extends Component {\r\n    // constructor will be called first\r\n    constructor() {\r\n        super()\r\n        // this state is special for class components. They are data you can use\r\n        this.state = {\r\n           title: 'I am title page' \r\n        }\r\n        \r\n        console.log('constructor')\r\n    }\r\n    //did mount will always fire whenever everything is done executed\r\n    componentDidMount(){\r\n        console.log('component did mount')\r\n    }\r\n    //will be called whenever an update happens\r\n    componentDidUpdate() {\r\n        console.log('component did update')\r\n    }\r\n\r\n    componentWillUnmount() {\r\n         console.log('component will unmount')\r\n    }\r\n\r\n    updateTitle() {\r\n        this.setState({ title: 'wew' })\r\n    }\r\n\r\n    // then 2nd to be called is render()\r\n    render() {\r\n        console.log('render')\r\n        // this is called destructuring. Im taking the reference to this.state.title and assigning it to variable title\r\n        const {title} = this.state\r\n        // const title = this.state.title is the equivalent of the code above.\r\n        return (\r\n            <div>\r\n            \r\n                <BaseLayout>\r\n                    <h1>Welcome to Index Poasaage</h1>\r\n                    <h2>{title}</h2>\r\n                    {/* this button's onClick property executes a function denoted by the arrow => function which fires updateTitle() */}\r\n                    <button onClick={ () => this.updateTitle()}>Change title</button>\r\n                </BaseLayout>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Index\r\n"]},"metadata":{},"sourceType":"module"}