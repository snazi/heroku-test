{"ast":null,"code":"import auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\nimport { getCookieFromRequest } from '../helpers/utils';\nconst CLIENT_ID = \"Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ\";\n\nclass Auth0 {\n  constructor() {\n    this.auth0 = new auth0.WebAuth({\n      // both domain and client ID come from auth0 application settings on the dashboard\n      domain: 'dev-qo3dzhrn.auth0.com',\n      clientID: CLIENT_ID,\n      // redirectUri will replace the URL once you successfully log in\n      redirectUri: `${\"http://angeloamadora.herokuapp.com\"}/callback`,\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    }); // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\n\n    this.login = this.login.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  handleAuthentication() {\n    return new Promise((resolve, reject) => {\n      this.auth0.parseHash((err, authResult) => {\n        console.log(authResult);\n\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          this.setSession(authResult);\n          resolve();\n        } else if (err) {\n          reject(err);\n          console.log(err);\n        }\n      });\n    });\n  } // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\n\n\n  setSession(authResult) {\n    // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\n    const expiresAt = JSON.stringify(authResult.expiresIn * 2000 + new Date().getTime());\n    Cookies.set('user', authResult.idTokenPayload);\n    Cookies.set('jwt', authResult.idToken);\n    Cookies.set('expiresAt', expiresAt);\n  }\n\n  logout() {\n    Cookies.remove('user');\n    Cookies.remove('jwt');\n    Cookies.remove('expiresAt');\n    this.auth0.logout({\n      returnTo: '',\n      clientID: CLIENT_ID\n    });\n  }\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  async getJWKS() {\n    const res = await axios.get('https://dev-qo3dzhrn.auth0.com/.well-known/jwks.json');\n    const jwks = res.data;\n    return jwks;\n  }\n\n  async verifyToken(token) {\n    if (token) {\n      const decodedToken = jwt.decode(token, {\n        complete: true\n      });\n\n      if (!decodedToken) {\n        return undefined;\n      }\n\n      const jwks = await this.getJWKS();\n      const jwk = jwks.keys[0]; // build certificate\n\n      let cert = jwk.x5c[0];\n      cert = cert.match(/.{1,64}/g).join('\\n');\n      cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`;\n\n      if (jwk.kid === decodedToken.header.kid) {\n        try {\n          const verifiedToken = jwt.verify(token, cert); // this multiplier is to convert miliseconds to seconds\n\n          const expiresAt = verifiedToken.exp * 1000;\n          return verifiedToken && new Date().getTime() < expiresAt ? verifiedToken : undefined;\n        } catch (err) {\n          return undefined;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  async clientAuth() {\n    const token = Cookies.getJSON('jwt');\n    const verifiedToken = await this.verifyToken(token);\n    return verifiedToken;\n  }\n\n  async serverAuth(req) {\n    if (req.headers.cookie) {\n      const token = getCookieFromRequest(req, 'jwt');\n      const verifiedToken = await this.verifyToken(token);\n      return verifiedToken;\n    }\n\n    return undefined;\n  }\n\n}\n\nconst auth0Client = new Auth0();\nexport default auth0Client;","map":null,"metadata":{},"sourceType":"module"}