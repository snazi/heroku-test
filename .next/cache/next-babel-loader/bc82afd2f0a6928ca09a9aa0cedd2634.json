{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useMemo, useState, useEffect } from 'react';\nimport isHotkey from 'is-hotkey';\nimport { Editable, withReact, useSlate, Slate } from 'slate-react';\nimport { Editor, Transforms, createEditor, Node, Text } from 'slate';\nimport { withHistory } from 'slate-history';\nimport ControllMenu from './ControllMenu';\nimport escapeHtml from 'escape-html';\nimport { jsx } from 'slate-hyperscript';\nimport { Button, Icon, Toolbar } from './components';\nconst HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code'\n};\nconst LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nconst serialize = node => {\n  if (Text.isText(node)) {\n    return escapeHtml(node.text);\n  }\n\n  const children = node.children.map(n => serialize(n)).join('');\n\n  switch (node.type) {\n    case 'block-quote':\n      return `<blockquote><p>${children}</p></blockquote>`;\n\n    case 'paragraph':\n      return `<p>${children}</p>`;\n\n    case 'link':\n      return `<a href=\"${escapeHtml(node.url)}\">${children}</a>`;\n\n    case 'code':\n      return `ahahahah tangina`;\n\n    default:\n      return children;\n  }\n};\n\nconst deserialize = el => {\n  if (el.nodeType === 3) {\n    return el.textContent;\n  } else if (el.nodeType !== 1) {\n    return null;\n  }\n\n  const children = Array.from(el.childNodes).map(deserialize);\n\n  switch (el.nodeName) {\n    case 'BODY':\n      return jsx('fragment', {}, children);\n\n    case 'BR':\n      return '\\n';\n\n    case 'BLOCKQUOTE':\n      return jsx('element', {\n        type: 'quote'\n      }, children);\n\n    case 'P':\n      return jsx('element', {\n        type: 'paragraph'\n      }, children);\n\n    case 'A':\n      return jsx('element', {\n        type: 'link',\n        url: el.getAttribute('href')\n      }, children);\n\n    default:\n      return el.textContent;\n  }\n};\n\nconst initializeEditorWithProps = (props, setValue) => {\n  useEffect(() => {\n    const document = new DOMParser().parseFromString(props.initialValue, 'text/html');\n    const final = deserialize(document.body);\n    setValue(final);\n  }, []);\n};\n\nconst getTitle = value => {\n  const firstBlock = serialize(value.children[0]);\n  const secondBlock = value.children[1] ? serialize(value.children[1]) : null;\n  console.log(firstBlock);\n  const title = firstBlock ? firstBlock : 'No Title';\n  const subtitle = secondBlock ? secondBlock : 'No Subtitle';\n  return {\n    title,\n    subtitle\n  };\n};\n\nconst save = (props, value) => {\n  const headingValues = getTitle(value);\n  const text = serialize(value);\n  console.log(headingValues);\n  !props.isSaving && props.save(headingValues, text);\n};\n\nconst RichText = props => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  if (props.initialValue) useEffect(() => {\n    const document = new DOMParser().parseFromString(props.initialValue, 'text/html');\n    const final = deserialize(document.body);\n    setValue(final);\n  }, []);\n  const renderElement = useCallback(props => __jsx(Element, props), []);\n  const renderLeaf = useCallback(props => __jsx(Leaf, props), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const {\n    isSaving\n  } = props;\n  return __jsx(React.Fragment, null, __jsx(ControllMenu, {\n    isSaving: isSaving,\n    save: () => save(props, editor)\n  }), __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(Toolbar, null, __jsx(MarkButton, {\n    format: \"bold\",\n    icon: \"format_bold\"\n  }), __jsx(MarkButton, {\n    format: \"italic\",\n    icon: \"format_italic\"\n  }), __jsx(MarkButton, {\n    format: \"underline\",\n    icon: \"format_underlined\"\n  }), __jsx(MarkButton, {\n    format: \"code\",\n    icon: \"code\"\n  }), __jsx(BlockButton, {\n    format: \"heading-one\",\n    icon: \"looks_one\"\n  }), __jsx(BlockButton, {\n    format: \"heading-two\",\n    icon: \"looks_two\"\n  }), __jsx(BlockButton, {\n    format: \"block-quote\",\n    icon: \"format_quote\"\n  }), __jsx(BlockButton, {\n    format: \"numbered-list\",\n    icon: \"format_list_numbered\"\n  }), __jsx(BlockButton, {\n    format: \"bulleted-list\",\n    icon: \"format_list_bulleted\"\n  })), __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Enter some rich text\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    onKeyDown: event => {\n      for (const hotkey in HOTKEYS) {\n        if (isHotkey(hotkey, event)) {\n          event.preventDefault();\n          const mark = HOTKEYS[hotkey];\n          toggleMark(editor, mark);\n        }\n      }\n    }\n  })));\n};\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: n => LIST_TYPES.includes(n.type),\n    split: true\n  });\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  });\n\n  if (!isActive && isList) {\n    const block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'block-quote':\n      return __jsx(\"blockquote\", attributes, children);\n\n    case 'bulleted-list':\n      return __jsx(\"ul\", attributes, children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", attributes, children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", attributes, children);\n\n    case 'list-item':\n      return __jsx(\"li\", attributes, children);\n\n    case 'numbered-list':\n      return __jsx(\"ol\", attributes, children);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = __jsx(\"strong\", null, children);\n  }\n\n  if (leaf.code) {\n    children = __jsx(\"code\", null, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", null, children);\n  }\n\n  if (leaf.underline) {\n    children = __jsx(\"u\", null, children);\n  }\n\n  return __jsx(\"span\", attributes, children);\n};\n\nconst BlockButton = ({\n  format,\n  icon\n}) => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    active: isBlockActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleBlock(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nconst MarkButton = ({\n  format,\n  icon\n}) => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    active: isMarkActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleMark(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'This is editable '\n  }, {\n    text: 'rich',\n    bold: true\n  }, {\n    text: ' text, '\n  }, {\n    text: 'much',\n    italic: true\n  }, {\n    text: ' better than a '\n  }, {\n    text: '<textarea>',\n    code: true\n  }, {\n    text: '!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', or add a semantically rendered block quote in the middle of the page, like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    text: 'A wise quote.'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default RichText;","map":{"version":3,"sources":["E:/Documents/Projects/heroku potfolio test/heroku-test/components/slate-editor/RichText.js"],"names":["React","useCallback","useMemo","useState","useEffect","isHotkey","Editable","withReact","useSlate","Slate","Editor","Transforms","createEditor","Node","Text","withHistory","ControllMenu","escapeHtml","jsx","Button","Icon","Toolbar","HOTKEYS","LIST_TYPES","serialize","node","isText","text","children","map","n","join","type","url","deserialize","el","nodeType","textContent","Array","from","childNodes","nodeName","getAttribute","initializeEditorWithProps","props","setValue","document","DOMParser","parseFromString","initialValue","final","body","getTitle","value","firstBlock","secondBlock","console","log","title","subtitle","save","headingValues","isSaving","RichText","renderElement","renderLeaf","editor","event","hotkey","preventDefault","mark","toggleMark","toggleBlock","format","isActive","isBlockActive","isList","includes","unwrapNodes","match","split","setNodes","block","wrapNodes","isMarkActive","removeMark","addMark","nodes","marks","Element","attributes","element","Leaf","leaf","bold","code","italic","underline","BlockButton","icon","MarkButton"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState, useEffect  } from 'react'\r\nimport isHotkey from 'is-hotkey'\r\nimport { Editable, withReact, useSlate, Slate } from 'slate-react'\r\nimport { Editor, Transforms, createEditor, Node, Text } from 'slate'\r\nimport { withHistory } from 'slate-history'\r\nimport ControllMenu from './ControllMenu'\r\nimport escapeHtml from 'escape-html'\r\nimport { jsx } from 'slate-hyperscript'\r\n\r\n\r\nimport { Button, Icon, Toolbar } from './components'\r\n\r\nconst HOTKEYS = {\r\n  'mod+b': 'bold',\r\n  'mod+i': 'italic',\r\n  'mod+u': 'underline',\r\n  'mod+`': 'code',\r\n}\r\n\r\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\r\n\r\nconst serialize = node => {\r\n  if (Text.isText(node)) {\r\n    return escapeHtml(node.text)\r\n  }\r\n\r\n  const children = node.children.map(n => serialize(n)).join('')\r\n\r\n  switch (node.type) {\r\n    case 'block-quote':\r\n      return `<blockquote><p>${children}</p></blockquote>`\r\n    case 'paragraph':\r\n      return `<p>${children}</p>`\r\n    case 'link':\r\n      return `<a href=\"${escapeHtml(node.url)}\">${children}</a>`\r\n    case 'code':\r\n      return `ahahahah tangina`\r\n    default:\r\n      return children\r\n  }\r\n}\r\n\r\nconst deserialize = el => {\r\n \r\n  if (el.nodeType === 3) {\r\n    return el.textContent\r\n  } else if (el.nodeType !== 1) {\r\n    return null\r\n  }\r\n  \r\n  const children = Array.from(el.childNodes).map(deserialize)\r\n\r\n  switch (el.nodeName) {\r\n    case 'BODY':\r\n      return jsx('fragment', {}, children)\r\n    case 'BR':\r\n      return '\\n'\r\n    case 'BLOCKQUOTE':\r\n      return jsx('element', { type: 'quote' }, children)\r\n    case 'P':\r\n      return jsx('element', { type: 'paragraph' }, children)\r\n    case 'A':\r\n      return jsx(\r\n        'element',\r\n        { type: 'link', url: el.getAttribute('href') },\r\n        children\r\n      )\r\n    default:\r\n      return el.textContent\r\n  }\r\n}\r\n\r\nconst initializeEditorWithProps = (props, setValue) => {\r\n\r\n  useEffect(() => {\r\n    const document = new DOMParser().parseFromString(props.initialValue, 'text/html')\r\n    const final = deserialize(document.body)\r\n    setValue(final)\r\n  },[])\r\n  \r\n}\r\nconst getTitle = (value) => {\r\n\r\n  const firstBlock = serialize(value.children[0])\r\n  const secondBlock = value.children[1] ? serialize(value.children[1]) : null\r\n  console.log(firstBlock)\r\n  const title = firstBlock ? firstBlock : 'No Title'\r\n  const subtitle = secondBlock ? secondBlock : 'No Subtitle'\r\n  return {\r\n    title,\r\n    subtitle\r\n  }\r\n}\r\n\r\n\r\n\r\nconst save = (props,value)=> {\r\n\r\n  const headingValues = getTitle(value)\r\n  const text = serialize(value)\r\n  console.log(headingValues)\r\n\r\n  !props.isSaving && props.save(headingValues, text)\r\n\r\n}\r\n\r\nconst RichText = (props) => {\r\n  \r\n  const [value, setValue] = useState(initialValue)\r\n\r\n  if(props.initialValue)\r\n    useEffect(() => {\r\n      const document = new DOMParser().parseFromString(props.initialValue, 'text/html')\r\n      const final = deserialize(document.body)\r\n      setValue(final)\r\n    },[])\r\n  \r\n  const renderElement = useCallback(props => <Element {...props} />, [])\r\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\r\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\r\n\r\n  const {isSaving} = props\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ControllMenu isSaving={isSaving} save={() => save(props, editor)}></ControllMenu>\r\n      <Slate editor={editor} value={value} onChange={value => setValue(value)}>\r\n        <Toolbar>\r\n          <MarkButton format=\"bold\" icon=\"format_bold\" />\r\n          <MarkButton format=\"italic\" icon=\"format_italic\" />\r\n          <MarkButton format=\"underline\" icon=\"format_underlined\" />\r\n          <MarkButton format=\"code\" icon=\"code\" />\r\n          <BlockButton format=\"heading-one\" icon=\"looks_one\" />\r\n          <BlockButton format=\"heading-two\" icon=\"looks_two\" />\r\n          <BlockButton format=\"block-quote\" icon=\"format_quote\" />\r\n          <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\r\n          <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\r\n        </Toolbar>\r\n        <Editable\r\n          renderElement={renderElement}\r\n          renderLeaf={renderLeaf}\r\n          placeholder=\"Enter some rich text…\"\r\n          spellCheck\r\n          autoFocus\r\n          onKeyDown={event => {\r\n            for (const hotkey in HOTKEYS) {\r\n              if (isHotkey(hotkey, event)) {\r\n                event.preventDefault()\r\n                const mark = HOTKEYS[hotkey]\r\n                toggleMark(editor, mark)\r\n              }\r\n            }\r\n          }}\r\n        />\r\n      </Slate>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst toggleBlock = (editor, format) => {\r\n  const isActive = isBlockActive(editor, format)\r\n  const isList = LIST_TYPES.includes(format)\r\n\r\n  Transforms.unwrapNodes(editor, {\r\n    match: n => LIST_TYPES.includes(n.type),\r\n    split: true,\r\n  })\r\n\r\n  Transforms.setNodes(editor, {\r\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format,\r\n  })\r\n\r\n  if (!isActive && isList) {\r\n    const block = { type: format, children: [] }\r\n    Transforms.wrapNodes(editor, block)\r\n  }\r\n}\r\n\r\nconst toggleMark = (editor, format) => {\r\n  const isActive = isMarkActive(editor, format)\r\n\r\n  if (isActive) {\r\n    Editor.removeMark(editor, format)\r\n  } else {\r\n    Editor.addMark(editor, format, true)\r\n  }\r\n}\r\n\r\nconst isBlockActive = (editor, format) => {\r\n  const [match] = Editor.nodes(editor, {\r\n    match: n => n.type === format,\r\n  })\r\n\r\n  return !!match\r\n}\r\n\r\nconst isMarkActive = (editor, format) => {\r\n  const marks = Editor.marks(editor)\r\n  return marks ? marks[format] === true : false\r\n}\r\n\r\nconst Element = ({ attributes, children, element }) => {\r\n  switch (element.type) {\r\n    case 'block-quote':\r\n      return <blockquote {...attributes}>{children}</blockquote>\r\n    case 'bulleted-list':\r\n      return <ul {...attributes}>{children}</ul>\r\n    case 'heading-one':\r\n      return <h1 {...attributes}>{children}</h1>\r\n    case 'heading-two':\r\n      return <h2 {...attributes}>{children}</h2>\r\n    case 'list-item':\r\n      return <li {...attributes}>{children}</li>\r\n    case 'numbered-list':\r\n      return <ol {...attributes}>{children}</ol>\r\n    default:\r\n      return <p {...attributes}>{children}</p>\r\n  }\r\n}\r\n\r\nconst Leaf = ({ attributes, children, leaf }) => {\r\n  if (leaf.bold) {\r\n    children = <strong>{children}</strong>\r\n  }\r\n\r\n  if (leaf.code) {\r\n    children = <code>{children}</code>\r\n  }\r\n\r\n  if (leaf.italic) {\r\n    children = <em>{children}</em>\r\n  }\r\n\r\n  if (leaf.underline) {\r\n    children = <u>{children}</u>\r\n  }\r\n\r\n  return <span {...attributes}>{children}</span>\r\n}\r\n\r\nconst BlockButton = ({ format, icon }) => {\r\n  const editor = useSlate()\r\n  return (\r\n    <Button\r\n      active={isBlockActive(editor, format)}\r\n      onMouseDown={event => {\r\n        event.preventDefault()\r\n        toggleBlock(editor, format)\r\n      }}\r\n    >\r\n      <Icon>{icon}</Icon>\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst MarkButton = ({ format, icon }) => {\r\n  const editor = useSlate()\r\n  return (\r\n    <Button\r\n      active={isMarkActive(editor, format)}\r\n      onMouseDown={event => {\r\n        event.preventDefault()\r\n        toggleMark(editor, format)\r\n      }}\r\n    >\r\n      <Icon>{icon}</Icon>\r\n    </Button>\r\n  )\r\n}\r\n\r\nconst initialValue = [\r\n  \r\n  {\r\n    type: 'paragraph',\r\n    children: [\r\n      { text: 'This is editable ' },\r\n      { text: 'rich', bold: true },\r\n      { text: ' text, ' },\r\n      { text: 'much', italic: true },\r\n      { text: ' better than a ' },\r\n      { text: '<textarea>', code: true },\r\n      { text: '!' },\r\n    ],\r\n  },\r\n  {\r\n    type: 'paragraph',\r\n    children: [\r\n      {\r\n        text:\r\n          \"Since it's rich text, you can do things like turn a selection of text \",\r\n      },\r\n      { text: 'bold', bold: true },\r\n      {\r\n        text:\r\n          ', or add a semantically rendered block quote in the middle of the page, like this:',\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    type: 'block-quote',\r\n    children: [{ text: 'A wise quote.' }],\r\n  },\r\n  {\r\n    type: 'paragraph',\r\n    children: [{ text: 'Try it out for yourself!' }],\r\n  },\r\n]\r\n\r\nexport default RichText"]},"metadata":{},"sourceType":"module"}