{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport App, { Container } from 'next/app';\nimport auth0 from '../services/auth0'; //styling\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../components/common/styles/main.scss'; // TODO: once finished with entire project, use the current implementation, this is depcrated.\n\nexport default class MyApp extends App {\n  static async getInitialProps({\n    Component,\n    router,\n    ctx\n  }) {\n    let pageProps = {};\n    const user = false ? await auth0.clientAuth() : await auth0.serverAuth(ctx.req);\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    let isAuthenticated = false;\n\n    if (user) {\n      isAuthenticated = true;\n    } // now that we've managed to give auth details to both client and server side, we should pass the auth data to our pages\n\n\n    const auth = {\n      user,\n      isAuthenticated\n    }; // return auth as well as page props\n\n    return {\n      pageProps,\n      auth\n    };\n  }\n\n  render() {\n    // pass it along\n    const {\n      Component,\n      pageProps,\n      auth\n    } = this.props; // create an auth prop and pass this current instance of auth.\n\n    return __jsx(Container, null, __jsx(Component, _extends({}, pageProps, {\n      auth: auth\n    })));\n  }\n\n}","map":{"version":3,"sources":["E:/Documents/Projects/portfolio/frontend/pages/_app.js"],"names":["React","App","Container","auth0","MyApp","getInitialProps","Component","router","ctx","pageProps","user","clientAuth","serverAuth","req","isAuthenticated","auth","render","props"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,IAAaC,SAAb,QAA6B,UAA7B;AACA,OAAOC,KAAP,MAAkB,mBAAlB,C,CAEA;;AACA,OAAO,sCAAP;AACA,OAAO,uCAAP,C,CACA;;AACA,eAAe,MAAMC,KAAN,SAAoBH,GAApB,CAAwB;AACnC,eAAaI,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,MAAb;AAAqBC,IAAAA;AAArB,GAA7B,EAAyD;AAErD,QAAIC,SAAS,GAAG,EAAhB;AAEA,UAAMC,IAAI,GAAG,QAAkB,MAAMP,KAAK,CAACQ,UAAN,EAAxB,GAA6C,MAAMR,KAAK,CAACS,UAAN,CAAiBJ,GAAG,CAACK,GAArB,CAAhE;;AACA,QAAGP,SAAS,CAACD,eAAb,EAA6B;AACzBI,MAAAA,SAAS,GAAG,MAAMH,SAAS,CAACD,eAAV,CAA0BG,GAA1B,CAAlB;AACH;;AAED,QAAIM,eAAe,GAAG,KAAtB;;AACA,QAAGJ,IAAH,EAAQ;AACJI,MAAAA,eAAe,GAAG,IAAlB;AACH,KAZoD,CAarD;;;AACA,UAAMC,IAAI,GAAG;AAAEL,MAAAA,IAAF;AAAQI,MAAAA;AAAR,KAAb,CAdqD,CAgBrD;;AACA,WAAO;AAAEL,MAAAA,SAAF;AAAaM,MAAAA;AAAb,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEV,MAAAA,SAAF;AAAaG,MAAAA,SAAb;AAAwBM,MAAAA;AAAxB,QAAiC,KAAKE,KAA5C,CAFK,CAGL;;AACA,WACI,MAAC,SAAD,QACI,MAAC,SAAD,eAAeR,SAAf;AAA2B,MAAA,IAAI,EAAEM;AAAjC,OADJ,CADJ;AAKH;;AA9BkC","sourcesContent":["import React from 'react'\r\nimport App, {Container} from 'next/app'\r\nimport auth0 from '../services/auth0'\r\n\r\n//styling\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport '../components/common/styles/main.scss'\r\n// TODO: once finished with entire project, use the current implementation, this is depcrated.\r\nexport default class MyApp extends App {\r\n    static async getInitialProps({ Component, router, ctx }) {\r\n\r\n        let pageProps = {}\r\n\r\n        const user = process.browser ? await auth0.clientAuth() : await auth0.serverAuth(ctx.req)\r\n        if(Component.getInitialProps){\r\n            pageProps = await Component.getInitialProps(ctx)\r\n        }\r\n\r\n        let isAuthenticated = false\r\n        if(user){\r\n            isAuthenticated = true\r\n        }\r\n        // now that we've managed to give auth details to both client and server side, we should pass the auth data to our pages\r\n        const auth = { user, isAuthenticated  }\r\n\r\n        // return auth as well as page props\r\n        return { pageProps, auth }\r\n    }\r\n\r\n    render() {\r\n        // pass it along\r\n        const { Component, pageProps, auth } = this.props\r\n        // create an auth prop and pass this current instance of auth.\r\n        return (\r\n            <Container>\r\n                <Component {...pageProps } auth={auth} />\r\n            </Container>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}