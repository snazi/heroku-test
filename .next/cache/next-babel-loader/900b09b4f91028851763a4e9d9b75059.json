{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport auth0 from 'auth0-js';\nimport Cookies from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport axios from 'axios';\n\nvar Auth0 =\n/*#__PURE__*/\nfunction () {\n  function Auth0() {\n    _classCallCheck(this, Auth0);\n\n    this.auth0 = new auth0.WebAuth({\n      // both domain and client ID come from auth0 application settings on the dashboard\n      domain: 'dev-qo3dzhrn.auth0.com',\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ',\n      // redirectUri will replace the URL once you successfully log in\n      redirectUri: 'http://localhost:3000/callback',\n      responseType: 'token id_token',\n      scope: 'openid profile'\n    }); // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\n\n    this.login = this.login.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  _createClass(Auth0, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      return new _Promise(function (resolve, reject) {\n        _this.auth0.parseHash(function (err, authResult) {\n          console.log(authResult);\n\n          if (authResult && authResult.accessToken && authResult.idToken) {\n            _this.setSession(authResult);\n\n            resolve();\n          } else if (err) {\n            reject(err);\n            console.log(err);\n          }\n        });\n      });\n    } // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\n\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\n      var expiresAt = _JSON$stringify(authResult.expiresIn * 2000 + new Date().getTime());\n\n      Cookies.set('user', authResult.idTokenPayload);\n      Cookies.set('jwt', authResult.idToken);\n      Cookies.set('expiresAt', expiresAt);\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      Cookies.remove('user');\n      Cookies.remove('jwt');\n      Cookies.remove('expiresAt');\n      this.auth0.logout({\n        returnTo: '',\n        clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ'\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }, {\n    key: \"getJWKS\",\n    value: function getJWKS() {\n      var res, jwks;\n      return _regeneratorRuntime.async(function getJWKS$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get('https://dev-qo3dzhrn.auth0.com/.well-known/jwks.json'));\n\n            case 2:\n              res = _context.sent;\n              jwks = res.data;\n              return _context.abrupt(\"return\", jwks);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"verifyToken\",\n    value: function verifyToken(token) {\n      var decodedToken, jwks, jwk, cert, verifiedToken, expiresAt;\n      return _regeneratorRuntime.async(function verifyToken$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!token) {\n                _context2.next = 21;\n                break;\n              }\n\n              decodedToken = jwt.decode(token, {\n                complete: true\n              });\n\n              if (decodedToken) {\n                _context2.next = 4;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", undefined);\n\n            case 4:\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(this.getJWKS());\n\n            case 6:\n              jwks = _context2.sent;\n              jwk = jwks.keys[0]; // build certificate\n\n              cert = jwk.x5c[0];\n              cert = cert.match(/.{1,64}/g).join('\\n');\n              cert = \"-----BEGIN CERTIFICATE-----\\n\".concat(cert, \"\\n-----END CERTIFICATE-----\\n\");\n\n              if (!(jwk.kid === decodedToken.header.kid)) {\n                _context2.next = 21;\n                break;\n              }\n\n              _context2.prev = 12;\n              verifiedToken = jwt.verify(token, cert); // this multiplier is to convert miliseconds to seconds\n\n              expiresAt = verifiedToken.exp * 1000;\n              return _context2.abrupt(\"return\", verifiedToken && new Date().getTime() < expiresAt ? verifiedToken : undefined);\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](12);\n              return _context2.abrupt(\"return\", undefined);\n\n            case 21:\n              return _context2.abrupt(\"return\", undefined);\n\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, [[12, 18]]);\n    }\n  }, {\n    key: \"clientAuth\",\n    value: function clientAuth() {\n      var token, verifiedToken;\n      return _regeneratorRuntime.async(function clientAuth$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              token = Cookies.getJSON('jwt');\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(this.verifyToken(token));\n\n            case 3:\n              verifiedToken = _context3.sent;\n              return _context3.abrupt(\"return\", verifiedToken);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"serverAuth\",\n    value: function serverAuth(req) {\n      var tokenCookie, token, verifiedToken;\n      return _regeneratorRuntime.async(function serverAuth$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!req.headers.cookie) {\n                _context4.next = 9;\n                break;\n              }\n\n              tokenCookie = req.headers.cookie.split(\";\").find(function (c) {\n                return c.trim().startsWith('jwt=');\n              });\n\n              if (tokenCookie) {\n                _context4.next = 4;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", undefined);\n\n            case 4:\n              token = tokenCookie.split('=')[1];\n              _context4.next = 7;\n              return _regeneratorRuntime.awrap(this.verifyToken(token));\n\n            case 7:\n              verifiedToken = _context4.sent;\n              return _context4.abrupt(\"return\", verifiedToken);\n\n            case 9:\n              return _context4.abrupt(\"return\", undefined);\n\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this);\n    }\n  }]);\n\n  return Auth0;\n}();\n\nvar auth0Client = new Auth0();\nexport default auth0Client;","map":{"version":3,"sources":["E:/Documents/Projects/portfolio/frontend/services/auth0.js"],"names":["auth0","Cookies","jwt","axios","Auth0","WebAuth","domain","clientID","redirectUri","responseType","scope","login","bind","handleAuthentication","logout","resolve","reject","parseHash","err","authResult","console","log","accessToken","idToken","setSession","expiresAt","expiresIn","Date","getTime","set","idTokenPayload","remove","returnTo","authorize","get","res","jwks","data","token","decodedToken","decode","complete","undefined","getJWKS","jwk","keys","cert","x5c","match","join","kid","header","verifiedToken","verify","exp","getJSON","verifyToken","req","headers","cookie","tokenCookie","split","find","c","trim","startsWith","auth0Client"],"mappings":"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","sourcesContent":["import auth0 from 'auth0-js'\r\nimport Cookies from 'js-cookie'\r\nimport jwt from 'jsonwebtoken'\r\nimport axios from 'axios'\r\n\r\nclass Auth0 {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      // both domain and client ID come from auth0 application settings on the dashboard\r\n      domain: 'dev-qo3dzhrn.auth0.com',\r\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ',\r\n      // redirectUri will replace the URL once you successfully log in\r\n      redirectUri:'http://localhost:3000/callback',\r\n      responseType: 'token id_token',\r\n      scope: 'openid profile'\r\n    })\r\n    \r\n    // these 2 function call forces or binds the functions stated below to auth0.js' context. meaning function calls will only be handled in this file.\r\n    this.login = this.login.bind(this)\r\n    this.handleAuthentication = this.handleAuthentication.bind(this)\r\n    this.logout = this.logout.bind(this)\r\n\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        console.log(authResult)\r\n        if(authResult && authResult.accessToken && authResult.idToken) {\r\n          this.setSession(authResult)\r\n          resolve()\r\n        } else if (err) {\r\n          reject(err)\r\n          console.log(err)\r\n        }\r\n      })\r\n    })\r\n  }\r\n  // this function handles in \"cookies\" or the things we need to store in order to for the app to remember that we're logged in.\r\n  setSession(authResult) {\r\n    // these 4 lines is im calling a function from JSON to give me a set time, and im storing strings into local storage given a name.\r\n    const expiresAt = JSON.stringify((authResult.expiresIn * 2000) + new Date().getTime())\r\n\r\n    Cookies.set('user', authResult.idTokenPayload)\r\n    Cookies.set('jwt', authResult.idToken)\r\n    Cookies.set('expiresAt', expiresAt)\r\n  }\r\n\r\n  logout(){\r\n    Cookies.remove('user')\r\n    Cookies.remove('jwt')\r\n    Cookies.remove('expiresAt')\r\n\r\n    this.auth0.logout({\r\n      returnTo: '',\r\n      clientID: 'Tx1EtxPBuv2OriCqZikmha1p0hEFabHZ'\r\n    })\r\n  }\r\n\r\n  login() {\r\n    this.auth0.authorize()\r\n  }\r\n\r\n  async getJWKS() {\r\n    const res = await axios.get('https://dev-qo3dzhrn.auth0.com/.well-known/jwks.json')\r\n    const jwks = res.data\r\n    return jwks\r\n  }\r\n\r\n  async verifyToken(token) {\r\n    if (token) {\r\n      const decodedToken = jwt.decode(token, { complete: true })\r\n\r\n      if(!decodedToken) { return undefined }\r\n\r\n      const jwks = await this.getJWKS()\r\n      const jwk = jwks.keys[0]\r\n\r\n      // build certificate\r\n      let cert = jwk.x5c[0]\r\n      cert = cert.match(/.{1,64}/g).join('\\n')\r\n      cert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`\r\n    \r\n      if(jwk.kid === decodedToken.header.kid){\r\n        try {\r\n          const verifiedToken = jwt.verify(token, cert)\r\n          \r\n          // this multiplier is to convert miliseconds to seconds\r\n          const expiresAt = verifiedToken.exp * 1000\r\n\r\n          return (verifiedToken && new Date().getTime() < expiresAt ) ? verifiedToken : undefined\r\n\r\n        } catch(err){\r\n          return undefined\r\n        }\r\n      }\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  async clientAuth() {\r\n\r\n    const token = Cookies.getJSON('jwt')\r\n    const verifiedToken = await this.verifyToken(token)\r\n\r\n    return verifiedToken\r\n  }\r\n\r\n  async serverAuth(req) {\r\n    \r\n    if(req.headers.cookie){\r\n      const tokenCookie = req.headers.cookie.split(\";\").find(c => c.trim().startsWith('jwt='))\r\n      \r\n      if(!tokenCookie) {\r\n        return undefined\r\n      }\r\n\r\n      const token = tokenCookie.split('=')[1]\r\n      const verifiedToken = await this.verifyToken(token)\r\n\r\n      return verifiedToken\r\n\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n\r\n}\r\n\r\nconst auth0Client = new Auth0()\r\n\r\nexport default auth0Client"]},"metadata":{},"sourceType":"module"}