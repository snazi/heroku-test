{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n// Import React dependencies.\nimport React, { useEffect, useMemo, useState, useCallback } from \"react\"; // Import the Slate editor factory.\n\nimport { createEditor, Editor, Transforms, Text } from 'slate'; // Import the Slate components and React plugin.\n\nimport { Slate, Editable, withReact } from 'slate-react';\nvar CustomEditor = {\n  isBoldMarkActive: function isBoldMarkActive(editor) {\n    var _Editor$nodes = Editor.nodes(editor, {\n      match: function match(n) {\n        return n.bold === true;\n      },\n      universal: true\n    }),\n        _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n        match = _Editor$nodes2[0];\n\n    return !!match;\n  },\n  isCodeBlockActive: function isCodeBlockActive(editor) {\n    var _Editor$nodes3 = Editor.nodes(editor, {\n      match: function match(n) {\n        return n.type === 'code';\n      }\n    }),\n        _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),\n        match = _Editor$nodes4[0];\n\n    return !!match;\n  },\n  toggleBoldMark: function toggleBoldMark(editor) {\n    var isActive = CustomEditor.isBoldMarkActive(editor);\n    Transforms.setNodes(editor, {\n      bold: isActive ? null : true\n    }, {\n      match: function match(n) {\n        return Text.isText(n);\n      },\n      split: true\n    });\n  },\n  toggleCodeBlock: function toggleCodeBlock(editor) {\n    var isActive = CustomEditor.isCodeBlockActive(editor);\n    Transforms.setNodes(editor, {\n      type: isActive ? null : 'code'\n    }, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n  }\n};\n\nvar DefaultElement = function DefaultElement(props) {\n  return __jsx(\"p\", props.attributes, props.children);\n};\n\nvar Leaf = function Leaf(props) {\n  return __jsx(\"span\", _extends({}, props.attributes, {\n    style: {\n      fontWeight: props.leaf.bold ? 'bold' : 'normal'\n    }\n  }), props.children);\n};\n\nvar SlateEditor = function SlateEditor() {\n  var editor = useMemo(function () {\n    return withReact(createEditor());\n  }, []);\n\n  var _useState = useState([{\n    type: 'paragraph',\n    children: [{\n      text: 'A line of text in a paragraph.'\n    }]\n  }]),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, props);\n  }, []);\n  var renderElement = useCallback(function (props) {\n    switch (props.element.type) {\n      case 'code':\n        return __jsx(CodeElement, props);\n\n      default:\n        return __jsx(DefaultElement, props);\n    }\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(newValue) {\n      return setValue(newValue);\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    onKeyDown: function onKeyDown(event) {\n      if (!event.ctrlKey) {\n        return;\n      } // Replace the `onKeyDown` logic with our new commands.\n\n\n      switch (event.key) {\n        case '`':\n          {\n            event.preventDefault();\n            CustomEditor.toggleCodeBlock(editor);\n            break;\n          }\n\n        case 'b':\n          {\n            event.preventDefault();\n            CustomEditor.toggleBoldMark(editor);\n            break;\n          }\n      }\n    }\n  }));\n};\n\nexport default SlateEditor;","map":null,"metadata":{},"sourceType":"module"}