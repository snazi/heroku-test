{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Button, Label, Input, FormGroup } from 'reactstrap';\nimport './style.scss';\n\nconst PortInput = (_ref) => {\n  let {\n    label,\n    type,\n    field,\n    // { name, value, onChange, onBlur }\n    form: {\n      touched,\n      errors\n    }\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"type\", \"field\", \"form\"]);\n\n  return __jsx(FormGroup, null, __jsx(Label, null, label), __jsx(Input, _extends({\n    type: type\n  }, field, props)), touched[field.name] && errors[field.name] && __jsx(\"div\", {\n    className: \"error\"\n  }, errors[field.name]));\n};\n\nexport default PortInput;","map":null,"metadata":{},"sourceType":"module"}